{"ast":null,"code":"import memorizedQuestions from \"./memorizedQuestions.json\";\n\nfunction preventStutter(word) {\n  //pra evitar que os proximos resultados nao saim embaralhados\n  return \" \" + word + \" \";\n}\n\nfunction sameWords(userInput) {\n  //jsonificar isso aquiiiii\n  // girias ou variacoes \n  let sameWords_in = [\"vc\", \"tu\", \"q\", \"o q\", \"oq\", \"5\", \"estacao\", \"de trem\", \"de metro\", \"fracos\", \"fortes\", \"por que\", \"pq\", \"programacao\", \"situacao\", \"fala\", \"conta\", \"realizacoes\", \"realizacao\", \"conquistas\", \"localizacao\"];\n  let sameWords_out = [\"voce\", \"voce\", \"que\", \"o que\", \"o que\", \"cinco\", \"estaçao\", \"\", \"\", \"fraco\", \"forte\", \"porque\", \"porque\", \"programaçao\", \"situaçao\", \"fale\", \"conte\", \"realizaçoes\", \"realizaçao\", \"conquista\", \"localizaçao\"];\n\n  for (let i = 0; i < sameWords_in.length; i++) {\n    userInput = preventStutter(userInput).replace(preventStutter(sameWords_in[i]), preventStutter(sameWords_out[i]));\n  } //converte palavras com significados iguais aos memorizados\n\n\n  return userInput; //entrega com as palavras com significados iguais convertidas para palavra padrao\n}\n\nfunction rememberQuestions(json) {\n  //retorna perguntas memorizadas\n  let result = [];\n  let keys = Object.keys(json);\n  keys.forEach(function (key) {\n    result.push(json[key]);\n  });\n  return result;\n}\n\nfunction buildStringWithCounter(str, numbers) {\n  //monta string com counter\n  if (numbers >= 0 || numbers <= 99) {\n    numbers = \"00\" + numbers;\n  } else if (numbers > 9 || numbers <= 99) {\n    numbers = \"0\" + numbers;\n  } else if (numbers > 99 || numbers <= 999) {\n    numbers = toString(numbers);\n  } else {\n    numbers = \"ERR\";\n  }\n\n  let result = str + numbers;\n  return result;\n}\n\nfunction searchByCounter(str) {\n  //procura se string prossui contador true false\n  let prefix = \"%%\";\n  let newString = str.substring(str.length - 5, str.length - 3);\n  let result = false;\n\n  if (newString === prefix) {\n    result = true;\n  }\n\n  return result;\n}\n\nfunction removeCounter(str) {\n  //remove contador da string para comparações - add validacao\n  return str.substring(0, str.length - 5);\n}\n\nfunction getCounter(str) {\n  //add validacao\n  return parseInt(str.substring(str.length - 3, str.length));\n}\n\nfunction thinkingAboutKeys(array) {\n  // filtra chaves reconhecidas pelo maior contador informado pela AnalyzeKeys (independente de quantas keys forem)\n  let memoryCache;\n  let moreLikely;\n\n  if (array.length === 0) {\n    moreLikely = [\"%%dontknow%%\"];\n  } else {\n    for (let i = 0; i < array.length; i++) {\n      //filtra os contadores\n      if (memoryCache) {\n        if (getCounter(array[i]) >= getCounter(memoryCache[0])) {\n          memoryCache.unshift(array[i]);\n        } else {\n          memoryCache.push(array[i]);\n        }\n      } else {\n        memoryCache = [];\n        memoryCache.unshift(array[i]);\n      }\n    } //para proximas ideias no reconhecimento\n    //console.log(memoryCache)\n\n\n    moreLikely = [memoryCache[0]]; // filtra cache com o maior(ou maiores iguais) contador(res)  -- add validacao\n\n    for (let i = 1; i < memoryCache.length; i++) {\n      if (getCounter(memoryCache[i]) === getCounter(moreLikely[0])) {\n        moreLikely.push(removeCounter(memoryCache[i]));\n      }\n    }\n\n    moreLikely[0] = removeCounter(moreLikely[0]);\n  }\n\n  return [moreLikely, memoryCache];\n}\n\nfunction analyzeQuestion(hmmIRemember, userInput) {\n  //dividido em parcial e final/ compara as palavras do input com as questoes memorizadas\n  let partialAnalysis = []; //analise parcial\n\n  console.log(hmmIRemember[0]);\n\n  if (hmmIRemember[0] === \"%%dontknow%%\") {\n    // converte o nao reconhecido em nao lembrado rs\n    partialAnalysis.push(hmmIRemember);\n  }\n\n  hmmIRemember.forEach(itemRemembered => {\n    rememberQuestions(memorizedQuestions).forEach(obj => {\n      //carrega cada objetos do json\n      if (obj.id === itemRemembered) {\n        //compara cada palavra do input com da pergunta gravada na memoria\n        let memorizedQuestion = obj.questions;\n        let resultList = [];\n\n        for (let i = 0; i < memorizedQuestion.length; i++) {\n          //divide frases em palavras\n          let splitedMemQuestion = memorizedQuestion[i].split(\" \");\n          let splitedInputUser = userInput.split(\" \");\n          let counterEqualWords = 0;\n\n          for (let ii = 0; ii < splitedMemQuestion.length; ii++) {\n            //compara as palavras\n            const wordInMem = splitedMemQuestion[ii];\n\n            for (let iii = 0; iii < splitedInputUser.length; iii++) {\n              const wordInInput = splitedInputUser[iii];\n\n              if (wordInInput === wordInMem) {\n                counterEqualWords++; // contadoooor\n              }\n            }\n          }\n\n          resultList.push(counterEqualWords);\n        }\n\n        let result = resultList[0]; //add validacao\n\n        for (let ii = 0; ii < resultList.length; ii++) {\n          //filtra o maior contador\n          if (resultList[ii] > result) {\n            result = resultList[ii];\n          }\n        }\n\n        partialAnalysis.push([obj.id, result]);\n      }\n    });\n  });\n  let finalAnalisys; // analise final\n\n  if (partialAnalysis.length > 1) {\n    //confere se apos analisar a questao, ainda existe um empate\n    finalAnalisys = [];\n    finalAnalisys.push(\"%%draw%%\"); //seta aqui o prefixo para responder empate\n\n    for (let i = 0; i < partialAnalysis.length; i++) {\n      if (i === 0) {\n        finalAnalisys.push(partialAnalysis[i][0]);\n      } else if (i > 0 || partialAnalysis[i][1] === finalAnalisys[i - 1][0]) {\n        finalAnalisys.push(partialAnalysis[i][0]);\n      }\n    }\n  } else {\n    finalAnalisys = partialAnalysis[0][0];\n  }\n\n  return finalAnalisys;\n}\n\nfunction analyzeKeys(recognizingSomething) {\n  //analisa lista de keys reconhecidas\n  let thingsList = [];\n  let alreadyRecognized = false;\n\n  for (let i = 0; i < recognizingSomething.length; i++) {\n    //separa os itens reconhecidos\n    const itemRecognized = recognizingSomething[i];\n\n    for (let ii = 0; ii < thingsList.length; ii++) {\n      //separa os itens memorizados\n      const itemMemorized = thingsList[ii];\n\n      if (itemMemorized === itemRecognized) {\n        //compara\n        alreadyRecognized = true;\n      } else {\n        if (searchByCounter(itemMemorized)) {\n          if (removeCounter(itemMemorized) === itemRecognized) {\n            alreadyRecognized = true;\n          }\n        }\n      }\n    }\n\n    let prefixCounter = \"%%\";\n    let counter = 0;\n\n    if (alreadyRecognized) {\n      for (let ii = 0; ii < thingsList.length; ii++) {\n        let thing = thingsList[ii];\n\n        if (removeCounter(thing) === itemRecognized) {\n          counter++;\n          let numbers = parseInt(thing.substring(thing.length - 3, thing.length)) + 1;\n          thingsList[ii] = buildStringWithCounter(thingsList[ii].substring(0, thing.length - 3), numbers);\n        } else if (thing === itemRecognized) {\n          thingsList[ii] = buildStringWithCounter(thingsList[ii] + prefixCounter, counter);\n        }\n      }\n    } else {\n      counter++;\n      thingsList.push(buildStringWithCounter(itemRecognized + prefixCounter, counter));\n    }\n  }\n\n  return thingsList;\n}\n\nfunction getAnswersById(id) {\n  // retorna respostas do json pelo id da pergunta\n  let result = [];\n\n  if (Array.isArray(id)) {\n    // em caso de empate ele recebe mais de 1 lista, entao ele processa a resposta para empate aqui\n    for (let i = 0; i < id.length; i++) {\n      const eachId = id[i];\n\n      for (let ii = 0; ii < memorizedQuestions.length; ii++) {\n        const memorizedId = memorizedQuestions[ii].id;\n\n        if (result[0] === undefined) {\n          result.push(\"Eu não entendi muito bem a sua pergunta\");\n          result.push(\"Você quis dizer alguns dos temas abaixo?\");\n        } else if (result[0] !== undefined && memorizedId === eachId) {\n          result.push(memorizedQuestions[ii].desc);\n        }\n\n        if (ii === memorizedQuestions) {\n          result.push(\"Caso seja algum desses, me diga qual\");\n          result.push(\"Se não for, tente refazer a pergunta usando outras palavras\");\n        }\n      }\n    }\n  } else if (id === \"%%dontknow%%\") {\n    // se nao reconhecer nenhuma chave, nada!\n    result.push(\"Essa pergunta eu não conheço =(\");\n    result.push(\"Vou anotar e pedir pro Vinícius original me ensinar como responder\");\n  } else {\n    //se souber e for somente 1 item,  caso limpo\n    for (let i = 0; i < memorizedQuestions.length; i++) {\n      const memorizedId = memorizedQuestions[i].id;\n\n      if (memorizedId === id) {\n        result = memorizedQuestions[i].answers;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction compareWords(userInput, memorizedWord) {\n  //compara palavras - so strings por enquanto\n  let result = false;\n\n  if (userInput.includes(memorizedWord)) {\n    result = true;\n  }\n\n  return result;\n}\n\nconst questions = {\n  compare: userInput => {\n    let recognizingSomething = [];\n    userInput = sameWords(userInput); // aplica padrao para palavras com msm significado\n\n    rememberQuestions(memorizedQuestions).forEach(memorizedQuestion => {\n      //verifica se cada key existe no userInput\n      let keys = memorizedQuestion.keys;\n      let passedCounter = 0;\n      let twoFactory_1 = false; //validar as 2 keys\n\n      let twoFactory_2 = false;\n\n      if (typeof keys === \"object\") {\n        // precisa receber uma lista - é regra\n        for (let i = 0; i < keys.length; i++) {\n          //compara palavras vindas do usuarios com as keys\n          if (typeof keys[i] === \"object\") {\n            let checkKeys = keys[i];\n\n            for (let ii = 0; ii < checkKeys.length; ii++) {\n              if (passedCounter === 0 && compareWords(userInput, checkKeys[ii])) {\n                twoFactory_2 = true;\n              } else if (passedCounter === 1 && compareWords(userInput, checkKeys[ii])) {\n                twoFactory_1 = true;\n              } else if (passedCounter > 1) {\n                console.log(\"hey, estão me enviando chave a mais para analisar!! so pode 2 mininuuu\");\n              }\n            }\n          } else {\n            if (passedCounter === 0 && compareWords(userInput, keys[i])) {\n              twoFactory_2 = true;\n            } else if (passedCounter === 1 && compareWords(userInput, keys[i])) {\n              twoFactory_1 = true;\n            } else if (passedCounter > 1) {\n              console.log(\"hey, estão me enviando chave a mais para analisar!! so pode 2 mininuuu\");\n            }\n          }\n\n          if (twoFactory_1 && twoFactory_2) {\n            recognizingSomething.push(memorizedQuestion.id);\n          }\n\n          passedCounter++;\n        }\n      } else {\n        //precisa vir uma lista das keys - a regra é clara!\n        console.log(\"Receiving an invalid keys list!\"); //recognizingSomething.push(memorizedQuestion.id)\n      }\n    });\n    const myBrainIsArching = thinkingAboutKeys(analyzeKeys(recognizingSomething)); //analisa as keys identificadas e processa qual delas foi a mais acessada \n    //const keyCompareCache = myBrainIsArching[1]//para futuras atualizacoes\n\n    const hmmIRemember = myBrainIsArching[0]; //envia a resposta ja validada pelo analyze question\n\n    return getAnswersById(analyzeQuestion(hmmIRemember, userInput));\n  }\n};\nexport default questions;","map":{"version":3,"sources":["C:/desenv/react-profile/profile/src/components/Chatbot/questions.js"],"names":["memorizedQuestions","preventStutter","word","sameWords","userInput","sameWords_in","sameWords_out","i","length","replace","rememberQuestions","json","result","keys","Object","forEach","key","push","buildStringWithCounter","str","numbers","toString","searchByCounter","prefix","newString","substring","removeCounter","getCounter","parseInt","thinkingAboutKeys","array","memoryCache","moreLikely","unshift","analyzeQuestion","hmmIRemember","partialAnalysis","console","log","itemRemembered","obj","id","memorizedQuestion","questions","resultList","splitedMemQuestion","split","splitedInputUser","counterEqualWords","ii","wordInMem","iii","wordInInput","finalAnalisys","analyzeKeys","recognizingSomething","thingsList","alreadyRecognized","itemRecognized","itemMemorized","prefixCounter","counter","thing","getAnswersById","Array","isArray","eachId","memorizedId","undefined","desc","answers","compareWords","memorizedWord","includes","compare","passedCounter","twoFactory_1","twoFactory_2","checkKeys","myBrainIsArching"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,2BAA/B;;AAIA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAAE;AAC5B,SAAO,MAAMA,IAAN,GAAa,GAApB;AACH;;AAED,SAASC,SAAT,CAAmBC,SAAnB,EAA8B;AAAE;AAC5B;AACA,MAAIC,YAAY,GAAG,CACf,IADe,EAEf,IAFe,EAGf,GAHe,EAIf,KAJe,EAKf,IALe,EAMf,GANe,EAOf,SAPe,EAQf,SARe,EASf,UATe,EAUf,QAVe,EAWf,QAXe,EAYf,SAZe,EAaf,IAbe,EAcf,aAde,EAef,UAfe,EAgBf,MAhBe,EAiBf,OAjBe,EAkBf,aAlBe,EAmBf,YAnBe,EAoBf,YApBe,EAqBf,aArBe,CAAnB;AAwBA,MAAIC,aAAa,GAAG,CAChB,MADgB,EAEhB,MAFgB,EAGhB,KAHgB,EAIhB,OAJgB,EAKhB,OALgB,EAMhB,OANgB,EAOhB,SAPgB,EAQhB,EARgB,EAShB,EATgB,EAUhB,OAVgB,EAWhB,OAXgB,EAYhB,QAZgB,EAahB,QAbgB,EAchB,aAdgB,EAehB,UAfgB,EAgBhB,MAhBgB,EAiBhB,OAjBgB,EAkBhB,aAlBgB,EAmBhB,YAnBgB,EAoBhB,WApBgB,EAqBhB,aArBgB,CAApB;;AAyBA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CH,IAAAA,SAAS,GAAGH,cAAc,CAACG,SAAD,CAAd,CAA0BK,OAA1B,CAAkCR,cAAc,CAACI,YAAY,CAACE,CAAD,CAAb,CAAhD,EAAmEN,cAAc,CAACK,aAAa,CAACC,CAAD,CAAd,CAAjF,CAAZ;AACH,GArDyB,CAqDxB;;;AAEF,SAAOH,SAAP,CAvD0B,CAuDT;AACpB;;AAID,SAASM,iBAAT,CAA2BC,IAA3B,EAAiC;AAAE;AAC/B,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,IAAZ,CAAX;AACAE,EAAAA,IAAI,CAACE,OAAL,CAAa,UAAUC,GAAV,EAAe;AACxBJ,IAAAA,MAAM,CAACK,IAAP,CAAYN,IAAI,CAACK,GAAD,CAAhB;AACH,GAFD;AAIA,SAAOJ,MAAP;AACH;;AAED,SAASM,sBAAT,CAAgCC,GAAhC,EAAqCC,OAArC,EAA8C;AAAE;AAC5C,MAAKA,OAAO,IAAI,CAAZ,IAAmBA,OAAO,IAAI,EAAlC,EAAuC;AACnCA,IAAAA,OAAO,GAAG,OAAOA,OAAjB;AACH,GAFD,MAEO,IAAKA,OAAO,GAAG,CAAX,IAAkBA,OAAO,IAAI,EAAjC,EAAsC;AACzCA,IAAAA,OAAO,GAAG,MAAMA,OAAhB;AACH,GAFM,MAEA,IAAKA,OAAO,GAAG,EAAX,IAAmBA,OAAO,IAAI,GAAlC,EAAwC;AAC3CA,IAAAA,OAAO,GAAGC,QAAQ,CAACD,OAAD,CAAlB;AACH,GAFM,MAEA;AACHA,IAAAA,OAAO,GAAG,KAAV;AACH;;AACD,MAAIR,MAAM,GAAGO,GAAG,GAAGC,OAAnB;AACA,SAAOR,MAAP;AACH;;AAED,SAASU,eAAT,CAAyBH,GAAzB,EAA8B;AAAE;AAC5B,MAAII,MAAM,GAAG,IAAb;AACA,MAAIC,SAAS,GAAGL,GAAG,CAACM,SAAJ,CAAcN,GAAG,CAACX,MAAJ,GAAa,CAA3B,EAA8BW,GAAG,CAACX,MAAJ,GAAa,CAA3C,CAAhB;AACA,MAAII,MAAM,GAAG,KAAb;;AACA,MAAIY,SAAS,KAAKD,MAAlB,EAA0B;AACtBX,IAAAA,MAAM,GAAG,IAAT;AACH;;AACD,SAAOA,MAAP;AACH;;AAED,SAASc,aAAT,CAAuBP,GAAvB,EAA4B;AAAE;AAC1B,SAAOA,GAAG,CAACM,SAAJ,CAAc,CAAd,EAAiBN,GAAG,CAACX,MAAJ,GAAa,CAA9B,CAAP;AACH;;AAED,SAASmB,UAAT,CAAoBR,GAApB,EAAyB;AAAE;AACvB,SAAOS,QAAQ,CAACT,GAAG,CAACM,SAAJ,CAAcN,GAAG,CAACX,MAAJ,GAAa,CAA3B,EAA8BW,GAAG,CAACX,MAAlC,CAAD,CAAf;AACH;;AAED,SAASqB,iBAAT,CAA2BC,KAA3B,EAAkC;AAAE;AAChC,MAAIC,WAAJ;AACA,MAAIC,UAAJ;;AAEA,MAAGF,KAAK,CAACtB,MAAN,KAAe,CAAlB,EAAoB;AAChBwB,IAAAA,UAAU,GAAG,CAAC,cAAD,CAAb;AACH,GAFD,MAEO;AACH,SAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGuB,KAAK,CAACtB,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAAE;AACrC,UAAIwB,WAAJ,EAAiB;AACb,YAAIJ,UAAU,CAACG,KAAK,CAACvB,CAAD,CAAN,CAAV,IAAwBoB,UAAU,CAACI,WAAW,CAAC,CAAD,CAAZ,CAAtC,EAAwD;AACpDA,UAAAA,WAAW,CAACE,OAAZ,CAAoBH,KAAK,CAACvB,CAAD,CAAzB;AACH,SAFD,MAEO;AACHwB,UAAAA,WAAW,CAACd,IAAZ,CAAiBa,KAAK,CAACvB,CAAD,CAAtB;AACH;AACJ,OAND,MAMO;AACHwB,QAAAA,WAAW,GAAG,EAAd;AACAA,QAAAA,WAAW,CAACE,OAAZ,CAAoBH,KAAK,CAACvB,CAAD,CAAzB;AACH;AACJ,KAZE,CAYD;AACF;;;AAEAyB,IAAAA,UAAU,GAAG,CAACD,WAAW,CAAC,CAAD,CAAZ,CAAb,CAfG,CAe2B;;AAC9B,SAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwB,WAAW,CAACvB,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAIoB,UAAU,CAACI,WAAW,CAACxB,CAAD,CAAZ,CAAV,KAA+BoB,UAAU,CAACK,UAAU,CAAC,CAAD,CAAX,CAA7C,EAA8D;AAC1DA,QAAAA,UAAU,CAACf,IAAX,CAAgBS,aAAa,CAACK,WAAW,CAACxB,CAAD,CAAZ,CAA7B;AACH;AACJ;;AACDyB,IAAAA,UAAU,CAAC,CAAD,CAAV,GAAgBN,aAAa,CAACM,UAAU,CAAC,CAAD,CAAX,CAA7B;AACH;;AAID,SAAO,CAACA,UAAD,EAAaD,WAAb,CAAP;AACH;;AAED,SAASG,eAAT,CAAyBC,YAAzB,EAAuC/B,SAAvC,EAAkD;AAAE;AAChD,MAAIgC,eAAe,GAAG,EAAtB,CAD8C,CACrB;;AACzBC,EAAAA,OAAO,CAACC,GAAR,CAAYH,YAAY,CAAC,CAAD,CAAxB;;AACA,MAAGA,YAAY,CAAC,CAAD,CAAZ,KAAkB,cAArB,EAAoC;AAAE;AAClCC,IAAAA,eAAe,CAACnB,IAAhB,CAAqBkB,YAArB;AACH;;AAEDA,EAAAA,YAAY,CAACpB,OAAb,CAAqBwB,cAAc,IAAI;AAEnC7B,IAAAA,iBAAiB,CAACV,kBAAD,CAAjB,CAAsCe,OAAtC,CAA8CyB,GAAG,IAAI;AAAE;AAEnD,UAAIA,GAAG,CAACC,EAAJ,KAAWF,cAAf,EAA+B;AAAE;AAC7B,YAAIG,iBAAiB,GAAGF,GAAG,CAACG,SAA5B;AACA,YAAIC,UAAU,GAAG,EAAjB;;AACA,aAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmC,iBAAiB,CAAClC,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AAAE;AACjD,cAAIsC,kBAAkB,GAAGH,iBAAiB,CAACnC,CAAD,CAAjB,CAAqBuC,KAArB,CAA2B,GAA3B,CAAzB;AACA,cAAIC,gBAAgB,GAAG3C,SAAS,CAAC0C,KAAV,CAAgB,GAAhB,CAAvB;AACA,cAAIE,iBAAiB,GAAG,CAAxB;;AAEA,eAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGJ,kBAAkB,CAACrC,MAAzC,EAAiDyC,EAAE,EAAnD,EAAuD;AAAE;AACrD,kBAAMC,SAAS,GAAGL,kBAAkB,CAACI,EAAD,CAApC;;AACA,iBAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGJ,gBAAgB,CAACvC,MAAzC,EAAiD2C,GAAG,EAApD,EAAwD;AACpD,oBAAMC,WAAW,GAAGL,gBAAgB,CAACI,GAAD,CAApC;;AACA,kBAAIC,WAAW,KAAKF,SAApB,EAA+B;AAC3BF,gBAAAA,iBAAiB,GADU,CACP;AACvB;AACJ;AACJ;;AACDJ,UAAAA,UAAU,CAAC3B,IAAX,CAAgB+B,iBAAhB;AACH;;AACD,YAAIpC,MAAM,GAAGgC,UAAU,CAAC,CAAD,CAAvB,CAnB2B,CAmBA;;AAC3B,aAAK,IAAIK,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGL,UAAU,CAACpC,MAAjC,EAAyCyC,EAAE,EAA3C,EAA+C;AAAE;AAC7C,cAAIL,UAAU,CAACK,EAAD,CAAV,GAAiBrC,MAArB,EAA6B;AACzBA,YAAAA,MAAM,GAAGgC,UAAU,CAACK,EAAD,CAAnB;AACH;AACJ;;AACDb,QAAAA,eAAe,CAACnB,IAAhB,CAAqB,CAACuB,GAAG,CAACC,EAAL,EAAS7B,MAAT,CAArB;AACH;AACJ,KA7BD;AA8BH,GAhCD;AAkCA,MAAIyC,aAAJ,CAzC8C,CAyC5B;;AAElB,MAAIjB,eAAe,CAAC5B,MAAhB,GAAyB,CAA7B,EAAgC;AAAE;AAC9B6C,IAAAA,aAAa,GAAG,EAAhB;AACAA,IAAAA,aAAa,CAACpC,IAAd,CAAmB,UAAnB,EAF4B,CAEG;;AAG/B,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6B,eAAe,CAAC5B,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC7C,UAAIA,CAAC,KAAK,CAAV,EAAa;AACT8C,QAAAA,aAAa,CAACpC,IAAd,CAAmBmB,eAAe,CAAC7B,CAAD,CAAf,CAAmB,CAAnB,CAAnB;AACH,OAFD,MAEO,IAAKA,CAAC,GAAG,CAAL,IAAY6B,eAAe,CAAC7B,CAAD,CAAf,CAAmB,CAAnB,MAA0B8C,aAAa,CAAC9C,CAAC,GAAG,CAAL,CAAb,CAAqB,CAArB,CAA1C,EAAoE;AACvE8C,QAAAA,aAAa,CAACpC,IAAd,CAAmBmB,eAAe,CAAC7B,CAAD,CAAf,CAAmB,CAAnB,CAAnB;AACH;AACJ;AAEJ,GAbD,MAaO;AACH8C,IAAAA,aAAa,GAAGjB,eAAe,CAAC,CAAD,CAAf,CAAmB,CAAnB,CAAhB;AACH;;AAED,SAAOiB,aAAP;AACH;;AAED,SAASC,WAAT,CAAqBC,oBAArB,EAA2C;AAAE;AACzC,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,iBAAiB,GAAG,KAAxB;;AAEA,OAAK,IAAIlD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgD,oBAAoB,CAAC/C,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AAAC;AACnD,UAAMmD,cAAc,GAAGH,oBAAoB,CAAChD,CAAD,CAA3C;;AAEA,SAAK,IAAI0C,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGO,UAAU,CAAChD,MAAjC,EAAyCyC,EAAE,EAA3C,EAA+C;AAAE;AAC7C,YAAMU,aAAa,GAAGH,UAAU,CAACP,EAAD,CAAhC;;AAEA,UAAIU,aAAa,KAAKD,cAAtB,EAAsC;AAAE;AACpCD,QAAAA,iBAAiB,GAAG,IAApB;AACH,OAFD,MAEO;AAEH,YAAInC,eAAe,CAACqC,aAAD,CAAnB,EAAoC;AAEhC,cAAIjC,aAAa,CAACiC,aAAD,CAAb,KAAiCD,cAArC,EAAqD;AACjDD,YAAAA,iBAAiB,GAAG,IAApB;AACH;AACJ;AACJ;AACJ;;AACD,QAAIG,aAAa,GAAG,IAApB;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,QAAIJ,iBAAJ,EAAuB;AACnB,WAAK,IAAIR,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGO,UAAU,CAAChD,MAAjC,EAAyCyC,EAAE,EAA3C,EAA+C;AAC3C,YAAIa,KAAK,GAAGN,UAAU,CAACP,EAAD,CAAtB;;AAEA,YAAIvB,aAAa,CAACoC,KAAD,CAAb,KAAyBJ,cAA7B,EAA6C;AACzCG,UAAAA,OAAO;AACP,cAAIzC,OAAO,GAAGQ,QAAQ,CAACkC,KAAK,CAACrC,SAAN,CAAgBqC,KAAK,CAACtD,MAAN,GAAe,CAA/B,EAAkCsD,KAAK,CAACtD,MAAxC,CAAD,CAAR,GAA4D,CAA1E;AACAgD,UAAAA,UAAU,CAACP,EAAD,CAAV,GAAiB/B,sBAAsB,CAACsC,UAAU,CAACP,EAAD,CAAV,CAAexB,SAAf,CAAyB,CAAzB,EAA4BqC,KAAK,CAACtD,MAAN,GAAe,CAA3C,CAAD,EAAgDY,OAAhD,CAAvC;AAEH,SALD,MAKO,IAAI0C,KAAK,KAAKJ,cAAd,EAA8B;AACjCF,UAAAA,UAAU,CAACP,EAAD,CAAV,GAAiB/B,sBAAsB,CAACsC,UAAU,CAACP,EAAD,CAAV,GAAiBW,aAAlB,EAAiCC,OAAjC,CAAvC;AAEH;AACJ;AACJ,KAdD,MAcO;AACHA,MAAAA,OAAO;AACPL,MAAAA,UAAU,CAACvC,IAAX,CAAgBC,sBAAsB,CAACwC,cAAc,GAAGE,aAAlB,EAAiCC,OAAjC,CAAtC;AACH;AACJ;;AAED,SAAOL,UAAP;AACH;;AAED,SAASO,cAAT,CAAwBtB,EAAxB,EAA4B;AAAE;AAC1B,MAAI7B,MAAM,GAAG,EAAb;;AAEA,MAAIoD,KAAK,CAACC,OAAN,CAAcxB,EAAd,CAAJ,EAAuB;AAAE;AACrB,SAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,EAAE,CAACjC,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAChC,YAAM2D,MAAM,GAAGzB,EAAE,CAAClC,CAAD,CAAjB;;AACA,WAAK,IAAI0C,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGjD,kBAAkB,CAACQ,MAAzC,EAAiDyC,EAAE,EAAnD,EAAuD;AACnD,cAAMkB,WAAW,GAAGnE,kBAAkB,CAACiD,EAAD,CAAlB,CAAuBR,EAA3C;;AACA,YAAI7B,MAAM,CAAC,CAAD,CAAN,KAAcwD,SAAlB,EAA6B;AACzBxD,UAAAA,MAAM,CAACK,IAAP,CAAY,yCAAZ;AACAL,UAAAA,MAAM,CAACK,IAAP,CAAY,0CAAZ;AACH,SAHD,MAGO,IAAKL,MAAM,CAAC,CAAD,CAAN,KAAcwD,SAAf,IAA8BD,WAAW,KAAKD,MAAlD,EAA2D;AAC9DtD,UAAAA,MAAM,CAACK,IAAP,CAAYjB,kBAAkB,CAACiD,EAAD,CAAlB,CAAuBoB,IAAnC;AACH;;AACD,YAAIpB,EAAE,KAAKjD,kBAAX,EAA+B;AAC3BY,UAAAA,MAAM,CAACK,IAAP,CAAY,sCAAZ;AACAL,UAAAA,MAAM,CAACK,IAAP,CAAY,6DAAZ;AACH;AACJ;AACJ;AAEJ,GAlBD,MAkBO,IAAIwB,EAAE,KAAK,cAAX,EAA2B;AAAE;AAChC7B,IAAAA,MAAM,CAACK,IAAP,CAAY,iCAAZ;AACAL,IAAAA,MAAM,CAACK,IAAP,CAAY,oEAAZ;AAEH,GAJM,MAIA;AAAE;AACL,SAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,kBAAkB,CAACQ,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAChD,YAAM4D,WAAW,GAAGnE,kBAAkB,CAACO,CAAD,CAAlB,CAAsBkC,EAA1C;;AACA,UAAI0B,WAAW,KAAK1B,EAApB,EAAwB;AACpB7B,QAAAA,MAAM,GAAGZ,kBAAkB,CAACO,CAAD,CAAlB,CAAsB+D,OAA/B;AACH;AACJ;AACJ;;AAID,SAAO1D,MAAP;AACH;;AAED,SAAS2D,YAAT,CAAsBnE,SAAtB,EAAiCoE,aAAjC,EAAgD;AAAE;AAC9C,MAAI5D,MAAM,GAAG,KAAb;;AACA,MAAIR,SAAS,CAACqE,QAAV,CAAmBD,aAAnB,CAAJ,EAAuC;AACnC5D,IAAAA,MAAM,GAAG,IAAT;AACH;;AACD,SAAOA,MAAP;AACH;;AAED,MAAM+B,SAAS,GAAG;AACd+B,EAAAA,OAAO,EAAGtE,SAAD,IAAe;AACpB,QAAImD,oBAAoB,GAAG,EAA3B;AACAnD,IAAAA,SAAS,GAAGD,SAAS,CAACC,SAAD,CAArB,CAFoB,CAEa;;AAEjCM,IAAAA,iBAAiB,CAACV,kBAAD,CAAjB,CAAsCe,OAAtC,CAA8C2B,iBAAiB,IAAI;AAAE;AACjE,UAAI7B,IAAI,GAAG6B,iBAAiB,CAAC7B,IAA7B;AACA,UAAI8D,aAAa,GAAG,CAApB;AACA,UAAIC,YAAY,GAAG,KAAnB,CAH+D,CAGtC;;AACzB,UAAIC,YAAY,GAAG,KAAnB;;AAEA,UAAI,OAAQhE,IAAR,KAAkB,QAAtB,EAAgC;AAAE;AAC9B,aAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,IAAI,CAACL,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAAE;AACpC,cAAI,OAAQM,IAAI,CAACN,CAAD,CAAZ,KAAqB,QAAzB,EAAmC;AAC/B,gBAAIuE,SAAS,GAAGjE,IAAI,CAACN,CAAD,CAApB;;AACA,iBAAK,IAAI0C,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG6B,SAAS,CAACtE,MAAhC,EAAwCyC,EAAE,EAA1C,EAA8C;AAC1C,kBAAK0B,aAAa,KAAK,CAAnB,IAA0BJ,YAAY,CAACnE,SAAD,EAAY0E,SAAS,CAAC7B,EAAD,CAArB,CAA1C,EAAuE;AACnE4B,gBAAAA,YAAY,GAAG,IAAf;AACH,eAFD,MAEO,IAAKF,aAAa,KAAK,CAAnB,IAA0BJ,YAAY,CAACnE,SAAD,EAAY0E,SAAS,CAAC7B,EAAD,CAArB,CAA1C,EAAuE;AAC1E2B,gBAAAA,YAAY,GAAG,IAAf;AACH,eAFM,MAEA,IAAID,aAAa,GAAG,CAApB,EAAuB;AAC1BtC,gBAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ;AACH;AACJ;AACJ,WAXD,MAWO;AACH,gBAAKqC,aAAa,KAAK,CAAnB,IAA0BJ,YAAY,CAACnE,SAAD,EAAYS,IAAI,CAACN,CAAD,CAAhB,CAA1C,EAAiE;AAC7DsE,cAAAA,YAAY,GAAG,IAAf;AACH,aAFD,MAEO,IAAKF,aAAa,KAAK,CAAnB,IAA0BJ,YAAY,CAACnE,SAAD,EAAYS,IAAI,CAACN,CAAD,CAAhB,CAA1C,EAAiE;AACpEqE,cAAAA,YAAY,GAAG,IAAf;AACH,aAFM,MAEA,IAAID,aAAa,GAAG,CAApB,EAAuB;AAC1BtC,cAAAA,OAAO,CAACC,GAAR,CAAY,wEAAZ;AACH;AACJ;;AACD,cAAKsC,YAAD,IAAmBC,YAAvB,EAAsC;AAClCtB,YAAAA,oBAAoB,CAACtC,IAArB,CAA0ByB,iBAAiB,CAACD,EAA5C;AACH;;AACDkC,UAAAA,aAAa;AAChB;AACJ,OA3BD,MA2BO;AAAC;AACJtC,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EADG,CAEH;AACH;AACJ,KArCD;AAsCA,UAAMyC,gBAAgB,GAAGlD,iBAAiB,CAACyB,WAAW,CAACC,oBAAD,CAAZ,CAA1C,CA1CoB,CA0CyD;AAC7E;;AACA,UAAMpB,YAAY,GAAG4C,gBAAgB,CAAC,CAAD,CAArC,CA5CoB,CA8CpB;;AACA,WAAOhB,cAAc,CAAC7B,eAAe,CAACC,YAAD,EAAe/B,SAAf,CAAhB,CAArB;AACH;AAjDa,CAAlB;AA2DA,eAAeuC,SAAf","sourcesContent":["import memorizedQuestions from \"./memorizedQuestions.json\";\r\n\r\n\r\n\r\nfunction preventStutter(word) { //pra evitar que os proximos resultados nao saim embaralhados\r\n    return \" \" + word + \" \"\r\n}\r\n\r\nfunction sameWords(userInput) { //jsonificar isso aquiiiii\r\n    // girias ou variacoes \r\n    let sameWords_in = [\r\n        \"vc\",\r\n        \"tu\",\r\n        \"q\",\r\n        \"o q\",\r\n        \"oq\",\r\n        \"5\",\r\n        \"estacao\",\r\n        \"de trem\",\r\n        \"de metro\",\r\n        \"fracos\",\r\n        \"fortes\",\r\n        \"por que\",\r\n        \"pq\",\r\n        \"programacao\",\r\n        \"situacao\",\r\n        \"fala\",\r\n        \"conta\",\r\n        \"realizacoes\",\r\n        \"realizacao\",\r\n        \"conquistas\",\r\n        \"localizacao\"\r\n\r\n    ]\r\n    let sameWords_out = [\r\n        \"voce\",\r\n        \"voce\",\r\n        \"que\",\r\n        \"o que\",\r\n        \"o que\",\r\n        \"cinco\",\r\n        \"estaçao\",\r\n        \"\",\r\n        \"\",\r\n        \"fraco\",\r\n        \"forte\",\r\n        \"porque\",\r\n        \"porque\",\r\n        \"programaçao\",\r\n        \"situaçao\",\r\n        \"fale\",\r\n        \"conte\",\r\n        \"realizaçoes\",\r\n        \"realizaçao\",\r\n        \"conquista\",\r\n        \"localizaçao\"\r\n\r\n\r\n    ]\r\n    for (let i = 0; i < sameWords_in.length; i++) {\r\n        userInput = preventStutter(userInput).replace(preventStutter(sameWords_in[i]), preventStutter(sameWords_out[i]))\r\n    } //converte palavras com significados iguais aos memorizados\r\n\r\n    return userInput //entrega com as palavras com significados iguais convertidas para palavra padrao\r\n}\r\n\r\n\r\n\r\nfunction rememberQuestions(json) { //retorna perguntas memorizadas\r\n    let result = [];\r\n    let keys = Object.keys(json);\r\n    keys.forEach(function (key) {\r\n        result.push(json[key]);\r\n    });\r\n\r\n    return result\r\n}\r\n\r\nfunction buildStringWithCounter(str, numbers) { //monta string com counter\r\n    if ((numbers >= 0) || (numbers <= 99)) {\r\n        numbers = \"00\" + numbers\r\n    } else if ((numbers > 9) || (numbers <= 99)) {\r\n        numbers = \"0\" + numbers\r\n    } else if ((numbers > 99) || (numbers <= 999)) {\r\n        numbers = toString(numbers)\r\n    } else {\r\n        numbers = \"ERR\"\r\n    }\r\n    let result = str + numbers\r\n    return result\r\n}\r\n\r\nfunction searchByCounter(str) { //procura se string prossui contador true false\r\n    let prefix = \"%%\"\r\n    let newString = str.substring(str.length - 5, str.length - 3)\r\n    let result = false\r\n    if (newString === prefix) {\r\n        result = true\r\n    }\r\n    return result\r\n}\r\n\r\nfunction removeCounter(str) { //remove contador da string para comparações - add validacao\r\n    return str.substring(0, str.length - 5)\r\n}\r\n\r\nfunction getCounter(str) { //add validacao\r\n    return parseInt(str.substring(str.length - 3, str.length))\r\n}\r\n\r\nfunction thinkingAboutKeys(array) { // filtra chaves reconhecidas pelo maior contador informado pela AnalyzeKeys (independente de quantas keys forem)\r\n    let memoryCache\r\n    let moreLikely\r\n\r\n    if(array.length===0){\r\n        moreLikely = [\"%%dontknow%%\"]\r\n    } else {\r\n        for (let i = 0; i < array.length; i++) { //filtra os contadores\r\n            if (memoryCache) {\r\n                if (getCounter(array[i]) >= getCounter(memoryCache[0])) {\r\n                    memoryCache.unshift(array[i])\r\n                } else {\r\n                    memoryCache.push(array[i])\r\n                }\r\n            } else {\r\n                memoryCache = []\r\n                memoryCache.unshift(array[i])\r\n            }\r\n        } //para proximas ideias no reconhecimento\r\n        //console.log(memoryCache)\r\n    \r\n        moreLikely = [memoryCache[0]] // filtra cache com o maior(ou maiores iguais) contador(res)  -- add validacao\r\n        for (let i = 1; i < memoryCache.length; i++) {\r\n            if (getCounter(memoryCache[i]) === getCounter(moreLikely[0])) {\r\n                moreLikely.push(removeCounter(memoryCache[i]))\r\n            }\r\n        }\r\n        moreLikely[0] = removeCounter(moreLikely[0])\r\n    }\r\n\r\n \r\n\r\n    return [moreLikely, memoryCache]\r\n}\r\n\r\nfunction analyzeQuestion(hmmIRemember, userInput) { //dividido em parcial e final/ compara as palavras do input com as questoes memorizadas\r\n    let partialAnalysis = [] //analise parcial\r\n    console.log(hmmIRemember[0])\r\n    if(hmmIRemember[0]===\"%%dontknow%%\"){ // converte o nao reconhecido em nao lembrado rs\r\n        partialAnalysis.push(hmmIRemember)\r\n    }\r\n\r\n    hmmIRemember.forEach(itemRemembered => {\r\n\r\n        rememberQuestions(memorizedQuestions).forEach(obj => { //carrega cada objetos do json\r\n\r\n            if (obj.id === itemRemembered) { //compara cada palavra do input com da pergunta gravada na memoria\r\n                let memorizedQuestion = obj.questions\r\n                let resultList = []\r\n                for (let i = 0; i < memorizedQuestion.length; i++) { //divide frases em palavras\r\n                    let splitedMemQuestion = memorizedQuestion[i].split(\" \")\r\n                    let splitedInputUser = userInput.split(\" \")\r\n                    let counterEqualWords = 0\r\n\r\n                    for (let ii = 0; ii < splitedMemQuestion.length; ii++) { //compara as palavras\r\n                        const wordInMem = splitedMemQuestion[ii]\r\n                        for (let iii = 0; iii < splitedInputUser.length; iii++) {\r\n                            const wordInInput = splitedInputUser[iii]\r\n                            if (wordInInput === wordInMem) {\r\n                                counterEqualWords++ // contadoooor\r\n                            }\r\n                        }\r\n                    }\r\n                    resultList.push(counterEqualWords)\r\n                }\r\n                let result = resultList[0] //add validacao\r\n                for (let ii = 0; ii < resultList.length; ii++) { //filtra o maior contador\r\n                    if (resultList[ii] > result) {\r\n                        result = resultList[ii]\r\n                    }\r\n                }\r\n                partialAnalysis.push([obj.id, result])\r\n            }\r\n        })\r\n    })\r\n\r\n    let finalAnalisys // analise final\r\n\r\n    if (partialAnalysis.length > 1) { //confere se apos analisar a questao, ainda existe um empate\r\n        finalAnalisys = []\r\n        finalAnalisys.push(\"%%draw%%\") //seta aqui o prefixo para responder empate\r\n\r\n\r\n        for (let i = 0; i < partialAnalysis.length; i++) {\r\n            if (i === 0) {\r\n                finalAnalisys.push(partialAnalysis[i][0])\r\n            } else if ((i > 0) || (partialAnalysis[i][1] === finalAnalisys[i - 1][0])) {\r\n                finalAnalisys.push(partialAnalysis[i][0])\r\n            }\r\n        }\r\n\r\n    } else {\r\n        finalAnalisys = partialAnalysis[0][0]\r\n    }\r\n\r\n    return finalAnalisys\r\n}\r\n\r\nfunction analyzeKeys(recognizingSomething) { //analisa lista de keys reconhecidas\r\n    let thingsList = []\r\n    let alreadyRecognized = false\r\n\r\n    for (let i = 0; i < recognizingSomething.length; i++) {//separa os itens reconhecidos\r\n        const itemRecognized = recognizingSomething[i]\r\n\r\n        for (let ii = 0; ii < thingsList.length; ii++) { //separa os itens memorizados\r\n            const itemMemorized = thingsList[ii]\r\n\r\n            if (itemMemorized === itemRecognized) { //compara\r\n                alreadyRecognized = true\r\n            } else {\r\n\r\n                if (searchByCounter(itemMemorized)) {\r\n\r\n                    if (removeCounter(itemMemorized) === itemRecognized) {\r\n                        alreadyRecognized = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let prefixCounter = \"%%\"\r\n        let counter = 0\r\n        if (alreadyRecognized) {\r\n            for (let ii = 0; ii < thingsList.length; ii++) {\r\n                let thing = thingsList[ii]\r\n\r\n                if (removeCounter(thing) === itemRecognized) {\r\n                    counter++\r\n                    let numbers = parseInt(thing.substring(thing.length - 3, thing.length)) + 1\r\n                    thingsList[ii] = buildStringWithCounter(thingsList[ii].substring(0, thing.length - 3), numbers)\r\n\r\n                } else if (thing === itemRecognized) {\r\n                    thingsList[ii] = buildStringWithCounter(thingsList[ii] + prefixCounter, counter)\r\n\r\n                }\r\n            }\r\n        } else {\r\n            counter++\r\n            thingsList.push(buildStringWithCounter(itemRecognized + prefixCounter, counter))\r\n        }\r\n    }\r\n\r\n    return thingsList\r\n}\r\n\r\nfunction getAnswersById(id) { // retorna respostas do json pelo id da pergunta\r\n    let result = []\r\n\r\n    if (Array.isArray(id)) { // em caso de empate ele recebe mais de 1 lista, entao ele processa a resposta para empate aqui\r\n        for (let i = 0; i < id.length; i++) {\r\n            const eachId = id[i]\r\n            for (let ii = 0; ii < memorizedQuestions.length; ii++) {\r\n                const memorizedId = memorizedQuestions[ii].id\r\n                if (result[0] === undefined) {\r\n                    result.push(\"Eu não entendi muito bem a sua pergunta\")\r\n                    result.push(\"Você quis dizer alguns dos temas abaixo?\")\r\n                } else if ((result[0] !== undefined) && (memorizedId === eachId)) {\r\n                    result.push(memorizedQuestions[ii].desc)\r\n                }\r\n                if (ii === memorizedQuestions) {\r\n                    result.push(\"Caso seja algum desses, me diga qual\")\r\n                    result.push(\"Se não for, tente refazer a pergunta usando outras palavras\")\r\n                }\r\n            }\r\n        }\r\n\r\n    } else if (id === \"%%dontknow%%\") { // se nao reconhecer nenhuma chave, nada!\r\n        result.push(\"Essa pergunta eu não conheço =(\")\r\n        result.push(\"Vou anotar e pedir pro Vinícius original me ensinar como responder\")\r\n\r\n    } else { //se souber e for somente 1 item,  caso limpo\r\n        for (let i = 0; i < memorizedQuestions.length; i++) {\r\n            const memorizedId = memorizedQuestions[i].id\r\n            if (memorizedId === id) {\r\n                result = memorizedQuestions[i].answers\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return result\r\n}\r\n\r\nfunction compareWords(userInput, memorizedWord) { //compara palavras - so strings por enquanto\r\n    let result = false\r\n    if (userInput.includes(memorizedWord)) {\r\n        result = true\r\n    }\r\n    return result\r\n}\r\n\r\nconst questions = {\r\n    compare: (userInput) => {\r\n        let recognizingSomething = []\r\n        userInput = sameWords(userInput) // aplica padrao para palavras com msm significado\r\n\r\n        rememberQuestions(memorizedQuestions).forEach(memorizedQuestion => { //verifica se cada key existe no userInput\r\n            let keys = memorizedQuestion.keys\r\n            let passedCounter = 0\r\n            let twoFactory_1 = false //validar as 2 keys\r\n            let twoFactory_2 = false\r\n\r\n            if (typeof (keys) === \"object\") { // precisa receber uma lista - é regra\r\n                for (let i = 0; i < keys.length; i++) { //compara palavras vindas do usuarios com as keys\r\n                    if (typeof (keys[i]) === \"object\") {\r\n                        let checkKeys = keys[i]\r\n                        for (let ii = 0; ii < checkKeys.length; ii++) {\r\n                            if ((passedCounter === 0) && (compareWords(userInput, checkKeys[ii]))) {\r\n                                twoFactory_2 = true\r\n                            } else if ((passedCounter === 1) && (compareWords(userInput, checkKeys[ii]))) {\r\n                                twoFactory_1 = true\r\n                            } else if (passedCounter > 1) {\r\n                                console.log(\"hey, estão me enviando chave a mais para analisar!! so pode 2 mininuuu\")\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if ((passedCounter === 0) && (compareWords(userInput, keys[i]))) {\r\n                            twoFactory_2 = true\r\n                        } else if ((passedCounter === 1) && (compareWords(userInput, keys[i]))) {\r\n                            twoFactory_1 = true\r\n                        } else if (passedCounter > 1) {\r\n                            console.log(\"hey, estão me enviando chave a mais para analisar!! so pode 2 mininuuu\")\r\n                        }\r\n                    }\r\n                    if ((twoFactory_1) && (twoFactory_2)) {\r\n                        recognizingSomething.push(memorizedQuestion.id)\r\n                    }\r\n                    passedCounter++\r\n                }\r\n            } else {//precisa vir uma lista das keys - a regra é clara!\r\n                console.log(\"Receiving an invalid keys list!\")\r\n                //recognizingSomething.push(memorizedQuestion.id)\r\n            }\r\n        })\r\n        const myBrainIsArching = thinkingAboutKeys(analyzeKeys(recognizingSomething))//analisa as keys identificadas e processa qual delas foi a mais acessada \r\n        //const keyCompareCache = myBrainIsArching[1]//para futuras atualizacoes\r\n        const hmmIRemember = myBrainIsArching[0]\r\n\r\n        //envia a resposta ja validada pelo analyze question\r\n        return getAnswersById(analyzeQuestion(hmmIRemember, userInput))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default questions;"]},"metadata":{},"sourceType":"module"}