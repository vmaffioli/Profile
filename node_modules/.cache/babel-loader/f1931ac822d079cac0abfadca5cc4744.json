{"ast":null,"code":"// ActionProvider starter code\nimport config from './config';\nimport messages from './messages';\nimport memorizedQuestions from './memorizedQuestions.json';\nlet message;\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n    this.sendAnswer = answersList => {\n      const message = [];\n      let receivedCode_all = false;\n      console.log(answersList);\n\n      if (answersList[0] === \"%%all%%\") {\n        //temporario so para  retorno do 'que o bot consegue responder'\n        answersList = [];\n\n        for (let i = 0; i < memorizedQuestions.length; i++) {\n          const questionDesc = memorizedQuestions[i].desc;\n\n          if (questionDesc.length > 0) {\n            answersList.push(questionDesc);\n          }\n        }\n\n        receivedCode_all = true; //arrumar\n      } else if (answersList === \"%%dontknow%%\") {\n        an;\n      }\n\n      for (let i = 0; i < answersList.length; i++) {\n        //separa as respostas\n        const answer = answersList[i];\n        let delayValue = 1000; //  tempo inicial do delay\n\n        if (receivedCode_all) {\n          // seta fixo para retornar oq sabe responder\n          if (i > 0) {\n            delayValue = delayValue + i * 333; //tempo acumulado do delay para %%all%%\n          }\n        } else {\n          if (i > 0) {\n            delayValue = delayValue + i * 3500; //tempo acumulado do delay\n          }\n        }\n\n        message.push(this.createChatBotMessage(answer, {\n          delay: delayValue\n        })); //monta o message \n      }\n\n      message.forEach(e => {\n        //envia o message\n        this.addMessageToState(e);\n      });\n    };\n\n    this.default = () => {\n      message = [this.createChatBotMessage(messages.all_1(), {\n        delay: 1000\n      })];\n      message.forEach(e => {\n        this.addMessageToState(e);\n      });\n    };\n\n    this.presentation = (resultIsa, name) => {\n      if (resultIsa) {\n        message = [this.createChatBotMessage(messages.askName_finish(name)), this.createChatBotMessage(messages.presentation_finish(name), {\n          delay: 500\n        })];\n        message.forEach(e => {\n          this.addMessageToState(e);\n        });\n      } else {\n        message = [this.createChatBotMessage(messages.askName_finish(\"$$IsaFalse%%\")), this.createChatBotMessage(messages.presentation_finish(\"$$IsaFalse%%\"), {\n          delay: 500\n        })];\n        message.forEach(e => {\n          this.addMessageToState(e);\n        });\n      }\n\n      config.step = \"form_init\";\n    };\n\n    this.dont_know = () => {\n      message = [this.createChatBotMessage(messages.dont_know(), {\n        delay: 1000\n      })];\n      message.forEach(e => {\n        this.addMessageToState(e);\n      });\n    };\n\n    this.addMessageToState = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  }\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["C:/desenv/react-profile/profile/src/components/Chatbot/ActionProvider.js"],"names":["config","messages","memorizedQuestions","message","ActionProvider","constructor","createChatBotMessage","setStateFunc","createClientMessage","sendAnswer","answersList","receivedCode_all","console","log","i","length","questionDesc","desc","push","an","answer","delayValue","delay","forEach","e","addMessageToState","default","all_1","presentation","resultIsa","name","askName_finish","presentation_finish","step","dont_know","setState","prevState"],"mappings":"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","sourcesContent":["// ActionProvider starter code\r\nimport config from './config';\r\nimport messages from './messages';\r\nimport memorizedQuestions from './memorizedQuestions.json';\r\n\r\n\r\nlet message;\r\n\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n    this.createClientMessage = createClientMessage;\r\n  }\r\n\r\n  sendAnswer = (answersList) => {\r\n    const message = []\r\n    let receivedCode_all = false\r\n\r\n    console.log(answersList)\r\n\r\n\r\n\r\n\r\n    if (answersList[0] === \"%%all%%\") {//temporario so para  retorno do 'que o bot consegue responder'\r\n      answersList = []\r\n      for (let i = 0; i < memorizedQuestions.length; i++) {\r\n        const questionDesc = memorizedQuestions[i].desc\r\n        if (questionDesc.length > 0) {\r\n          answersList.push(questionDesc)\r\n        }\r\n      }\r\n      receivedCode_all = true //arrumar\r\n    } else if (answersList === \"%%dontknow%%\"){\r\n      an\r\n\r\n    }\r\n\r\n    for (let i = 0; i < answersList.length; i++) { //separa as respostas\r\n      const answer = answersList[i]\r\n      let delayValue = 1000 //  tempo inicial do delay\r\n\r\n      if (receivedCode_all) { // seta fixo para retornar oq sabe responder\r\n        if (i > 0) {\r\n          delayValue = delayValue + (i * 333) //tempo acumulado do delay para %%all%%\r\n        }\r\n      } else {\r\n        if (i > 0) {\r\n          delayValue = delayValue + (i * 3500) //tempo acumulado do delay\r\n        }\r\n      }\r\n\r\n      message.push(this.createChatBotMessage(answer, { delay: delayValue })) //monta o message \r\n    }\r\n    message.forEach(e => { //envia o message\r\n      this.addMessageToState(e);\r\n    })\r\n  }\r\n\r\n  default = () => {\r\n    message = [\r\n      this.createChatBotMessage(messages.all_1(), { delay: 1000 })\r\n    ];\r\n    message.forEach(e => {\r\n      this.addMessageToState(e);\r\n    })\r\n  }\r\n\r\n  presentation = (resultIsa, name) => {\r\n    if (resultIsa) {\r\n      message = [\r\n        this.createChatBotMessage(messages.askName_finish(name)),\r\n        this.createChatBotMessage(messages.presentation_finish(name), { delay: 500 })\r\n      ];\r\n      message.forEach(e => {\r\n        this.addMessageToState(e);\r\n      });\r\n    } else {\r\n      message = [\r\n        this.createChatBotMessage(messages.askName_finish(\"$$IsaFalse%%\")),\r\n        this.createChatBotMessage(messages.presentation_finish(\"$$IsaFalse%%\"), { delay: 500 })\r\n      ];\r\n      message.forEach(e => {\r\n        this.addMessageToState(e);\r\n      });\r\n    }\r\n    config.step = \"form_init\"\r\n  }\r\n\r\n  dont_know = () => {\r\n    message = [\r\n      this.createChatBotMessage(messages.dont_know(), { delay: 1000 })\r\n    ];\r\n    message.forEach(e => {\r\n      this.addMessageToState(e);\r\n    })\r\n  }\r\n\r\n\r\n  addMessageToState = (message) => {\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      messages: [...prevState.messages, message],\r\n    }));\r\n\r\n  };\r\n\r\n\r\n}\r\n\r\nexport default ActionProvider;"]},"metadata":{},"sourceType":"module"}