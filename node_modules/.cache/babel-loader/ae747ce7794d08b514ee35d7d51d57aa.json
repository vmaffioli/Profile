{"ast":null,"code":"import isaName from 'isa-know-name';\nimport config from './config';\nimport questions from './questions'; // MessageParser starter code\n\nclass MessageParser {\n  constructor(actionProvider, state) {\n    this.actionProvider = actionProvider;\n    this.state = state;\n  }\n\n  parse(message) {\n    const msg = message.toLowerCase();\n\n    function validateCounter(param) {\n      let validationCounter = false;\n      config.ansHist.forEach(e => {\n        if (e === param) {\n          validationCounter = true;\n        }\n      });\n\n      if (!validationCounter) {\n        config.ansCount++;\n      }\n\n      if (config.ansCount === config.totalQuestions * 1000) {\n        //retirar\n        this.actionProvider.all(message);\n        config.ansCount++;\n      } //console.log(config.ansCount)\n\n\n      config.ansHist.push(param);\n    }\n\n    if (config.step === \"presentation_init\") {\n      this.actionProvider.presentation(isaName.check(msg), isaName.filter(msg).toString());\n    } else if (config.step === \"form_init\") {\n      if (questions.compare(questions.aboutMe('content'), questions.aboutMe('key'), message)) {\n        this.actionProvider.q01(message);\n      } else if (questions.compare(questions.pontoForte('content'), questions.pontoForte('key'), message)) {\n        this.actionProvider.q02(message);\n      } else if (questions.compare(questions.pontoFraco('content'), questions.pontoFraco('key'), message)) {\n        this.actionProvider.q03(message);\n      } else if (questions.compare(questions.pretensaoSalarial('content'), questions.pretensaoSalarial('key'), message)) {\n        this.actionProvider.q04(message);\n        validateCounter(\"pretensaoSalarial\");\n      } else if (questions.compare(questions.cincoAnos('content'), questions.cincoAnos('key'), message)) {\n        this.actionProvider.q05(message);\n        validateCounter(\"cincoAnos\");\n      } else if (questions.compare(questions.habilidadesTecnicas('content'), questions.habilidadesTecnicas('key'), message)) {\n        this.actionProvider.q06(message);\n      } else if (questions.compare(questions.habilidadesSociais('content'), questions.habilidadesTecnicas('key'), message)) {\n        this.actionProvider.q07(message);\n      } else if (questions.compare(questions.all('content'), questions.all('key'), message)) {\n        this.actionProvider.qall(message);\n      } else {\n        this.actionProvider.dont_know();\n      }\n    }\n  }\n\n}\n\nexport default MessageParser;","map":{"version":3,"sources":["C:/desenv/react-profile/profile/src/components/Chatbot/MessageParser.js"],"names":["isaName","config","questions","MessageParser","constructor","actionProvider","state","parse","message","msg","toLowerCase","validateCounter","param","validationCounter","ansHist","forEach","e","ansCount","totalQuestions","all","push","step","presentation","check","filter","toString","compare","aboutMe","q01","pontoForte","q02","pontoFraco","q03","pretensaoSalarial","q04","cincoAnos","q05","habilidadesTecnicas","q06","habilidadesSociais","q07","qall","dont_know"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CAEA;;AAGA,MAAMC,aAAN,CAAoB;AAElBC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,KAAjB,EAAwB;AACjC,SAAKD,cAAL,GAAsBA,cAAtB;AACA,SAAKC,KAAL,GAAaA,KAAb;AAED;;AAGDC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACb,UAAMC,GAAG,GAAGD,OAAO,CAACE,WAAR,EAAZ;;AAEA,aAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,UAAIC,iBAAiB,GAAG,KAAxB;AAEAZ,MAAAA,MAAM,CAACa,OAAP,CAAeC,OAAf,CAAuBC,CAAC,IAAI;AAC1B,YAAIA,CAAC,KAAKJ,KAAV,EAAiB;AACfC,UAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,OAJD;;AAKA,UAAI,CAACA,iBAAL,EAAwB;AACtBZ,QAAAA,MAAM,CAACgB,QAAP;AACD;;AACD,UAAIhB,MAAM,CAACgB,QAAP,KAAqBhB,MAAM,CAACiB,cAAP,GAAwB,IAAjD,EAAwD;AAAE;AACxD,aAAKb,cAAL,CAAoBc,GAApB,CAAwBX,OAAxB;AACAP,QAAAA,MAAM,CAACgB,QAAP;AACD,OAd6B,CAe9B;;;AACAhB,MAAAA,MAAM,CAACa,OAAP,CAAeM,IAAf,CAAoBR,KAApB;AACD;;AAED,QAAIX,MAAM,CAACoB,IAAP,KAAgB,mBAApB,EAAyC;AACvC,WAAKhB,cAAL,CAAoBiB,YAApB,CAAiCtB,OAAO,CAACuB,KAAR,CAAcd,GAAd,CAAjC,EAAqDT,OAAO,CAACwB,MAAR,CAAef,GAAf,EAAoBgB,QAApB,EAArD;AACD,KAFD,MAEO,IAAIxB,MAAM,CAACoB,IAAP,KAAgB,WAApB,EAAiC;AAEtC,UAAInB,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACyB,OAAV,CAAkB,SAAlB,CAAlB,EAAgDzB,SAAS,CAACyB,OAAV,CAAkB,KAAlB,CAAhD,EAA0EnB,OAA1E,CAAJ,EAAwF;AACtF,aAAKH,cAAL,CAAoBuB,GAApB,CAAwBpB,OAAxB;AAED,OAHD,MAGO,IAAIN,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAAC2B,UAAV,CAAqB,SAArB,CAAlB,EAAmD3B,SAAS,CAAC2B,UAAV,CAAqB,KAArB,CAAnD,EAAgFrB,OAAhF,CAAJ,EAA8F;AACnG,aAAKH,cAAL,CAAoByB,GAApB,CAAwBtB,OAAxB;AAED,OAHM,MAGA,IAAIN,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAAC6B,UAAV,CAAqB,SAArB,CAAlB,EAAmD7B,SAAS,CAAC6B,UAAV,CAAqB,KAArB,CAAnD,EAAgFvB,OAAhF,CAAJ,EAA8F;AACnG,aAAKH,cAAL,CAAoB2B,GAApB,CAAwBxB,OAAxB;AAED,OAHM,MAGA,IAAIN,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAAC+B,iBAAV,CAA4B,SAA5B,CAAlB,EAA0D/B,SAAS,CAAC+B,iBAAV,CAA4B,KAA5B,CAA1D,EAA8FzB,OAA9F,CAAJ,EAA4G;AACjH,aAAKH,cAAL,CAAoB6B,GAApB,CAAwB1B,OAAxB;AAEAG,QAAAA,eAAe,CAAC,mBAAD,CAAf;AAED,OALM,MAKA,IAAIT,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACiC,SAAV,CAAoB,SAApB,CAAlB,EAAkDjC,SAAS,CAACiC,SAAV,CAAoB,KAApB,CAAlD,EAA8E3B,OAA9E,CAAJ,EAA4F;AACjG,aAAKH,cAAL,CAAoB+B,GAApB,CAAwB5B,OAAxB;AAEAG,QAAAA,eAAe,CAAC,WAAD,CAAf;AAED,OALM,MAKA,IAAIT,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACmC,mBAAV,CAA8B,SAA9B,CAAlB,EAA4DnC,SAAS,CAACmC,mBAAV,CAA8B,KAA9B,CAA5D,EAAkG7B,OAAlG,CAAJ,EAAgH;AACrH,aAAKH,cAAL,CAAoBiC,GAApB,CAAwB9B,OAAxB;AAGD,OAJM,MAIA,IAAIN,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACqC,kBAAV,CAA6B,SAA7B,CAAlB,EAA2DrC,SAAS,CAACmC,mBAAV,CAA8B,KAA9B,CAA3D,EAAiG7B,OAAjG,CAAJ,EAA+G;AACpH,aAAKH,cAAL,CAAoBmC,GAApB,CAAwBhC,OAAxB;AAGD,OAJM,MAIA,IAAIN,SAAS,CAACwB,OAAV,CAAkBxB,SAAS,CAACiB,GAAV,CAAc,SAAd,CAAlB,EAA4CjB,SAAS,CAACiB,GAAV,CAAc,KAAd,CAA5C,EAAkEX,OAAlE,CAAJ,EAAgF;AACrF,aAAKH,cAAL,CAAoBoC,IAApB,CAAyBjC,OAAzB;AAGD,OAJM,MAIA;AACL,aAAKH,cAAL,CAAoBqC,SAApB;AACD;AACF;AAIF;;AAzEiB;;AA4EpB,eAAevC,aAAf","sourcesContent":["import isaName from 'isa-know-name';\r\nimport config from './config';\r\nimport questions from './questions';\r\n\r\n// MessageParser starter code\r\n\r\n\r\nclass MessageParser {\r\n\r\n  constructor(actionProvider, state) {\r\n    this.actionProvider = actionProvider;\r\n    this.state = state;\r\n\r\n  }\r\n\r\n\r\n  parse(message) {\r\n    const msg = message.toLowerCase();\r\n\r\n    function validateCounter(param) {\r\n      let validationCounter = false\r\n      \r\n      config.ansHist.forEach(e => {\r\n        if (e === param) {\r\n          validationCounter = true\r\n        }\r\n      });\r\n      if (!validationCounter) {\r\n        config.ansCount++\r\n      }\r\n      if (config.ansCount === (config.totalQuestions * 1000)) { //retirar\r\n        this.actionProvider.all(message);\r\n        config.ansCount++\r\n      }\r\n      //console.log(config.ansCount)\r\n      config.ansHist.push(param)\r\n    }\r\n\r\n    if (config.step === \"presentation_init\") {\r\n      this.actionProvider.presentation(isaName.check(msg), isaName.filter(msg).toString());\r\n    } else if (config.step === \"form_init\") {\r\n\r\n      if (questions.compare(questions.aboutMe('content'), questions.aboutMe('key'), message)) {\r\n        this.actionProvider.q01(message);\r\n\r\n      } else if (questions.compare(questions.pontoForte('content'), questions.pontoForte('key'), message)) {\r\n        this.actionProvider.q02(message);\r\n\r\n      } else if (questions.compare(questions.pontoFraco('content'), questions.pontoFraco('key'), message)) {\r\n        this.actionProvider.q03(message);\r\n\r\n      } else if (questions.compare(questions.pretensaoSalarial('content'), questions.pretensaoSalarial('key'), message)) {\r\n        this.actionProvider.q04(message);\r\n\r\n        validateCounter(\"pretensaoSalarial\")\r\n\r\n      } else if (questions.compare(questions.cincoAnos('content'), questions.cincoAnos('key'), message)) {\r\n        this.actionProvider.q05(message);\r\n\r\n        validateCounter(\"cincoAnos\")\r\n\r\n      } else if (questions.compare(questions.habilidadesTecnicas('content'), questions.habilidadesTecnicas('key'), message)) {\r\n        this.actionProvider.q06(message);\r\n\r\n\r\n      } else if (questions.compare(questions.habilidadesSociais('content'), questions.habilidadesTecnicas('key'), message)) {\r\n        this.actionProvider.q07(message);\r\n\r\n\r\n      } else if (questions.compare(questions.all('content'), questions.all('key'), message)) {\r\n        this.actionProvider.qall(message);\r\n\r\n\r\n      } else {\r\n        this.actionProvider.dont_know();\r\n      }\r\n    }\r\n\r\n\r\n\r\n  }\r\n}\r\n\r\nexport default MessageParser;"]},"metadata":{},"sourceType":"module"}