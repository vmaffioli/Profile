{"ast":null,"code":"import memorizedQuestions from \"./memorizedQuestions.json\";\n\nfunction preventStutter(word) {\n  //pra evitar que os proximos resultados nao saim embaralhados\n  return \" \" + word + \" \";\n}\n\nfunction sameWords(userInput) {\n  //jsonificar isso aquiiiii\n  // girias ou variacoes \n  let sameWords_in = [\"vc\", \"tu\", \"q\", \"o q\", \"oq\", \"5\", \"estacao\", \"de trem\", \"de metro\", \"fracos\", \"fortes\", \"por que\", \"pq\", \"programacao\", \"situacao\", \"fala\", \"conta\", \"realizacoes\", \"realizacao\", \"conquistas\", \"localizacao\"];\n  let sameWords_out = [\"voce\", \"voce\", \"que\", \"o que\", \"o que\", \"cinco\", \"estaçao\", \"\", \"\", \"fraco\", \"forte\", \"porque\", \"porque\", \"programaçao\", \"situaçao\", \"fale\", \"conte\", \"realizaçoes\", \"realizaçao\", \"conquista\", \"localizaçao\"];\n\n  for (let i = 0; i < sameWords_in.length; i++) {\n    userInput = preventStutter(userInput).replace(preventStutter(sameWords_in[i]), preventStutter(sameWords_out[i]));\n  } //converte palavras com significados iguais aos memorizados\n\n\n  return userInput; //entrega com as palavras com significados iguais convertidas para palavra padrao\n}\n\nfunction chewInput(string) {\n  //mastiga input deixando mais facil de entender\n  let mapaAcentosHex = {\n    a: /[\\xE0-\\xE6]/g,\n    e: /[\\xE8-\\xEB]/g,\n    i: /[\\xEC-\\xEF]/g,\n    o: /[\\xF2-\\xF6]/g,\n    u: /[\\xF9-\\xFC]/g,\n    c: /\\xE7/g,\n    n: /\\xF1/g\n  };\n\n  for (let letra in mapaAcentosHex) {\n    //retira acentos\n    let expressaoRegular = mapaAcentosHex[letra];\n    string = string.replace(expressaoRegular, letra);\n  }\n\n  let split = string.split(\" \");\n\n  for (let i = 0; i < split.length; i++) {\n    if (split[i] === \"\") {\n      split.splice();\n    }\n  }\n\n  return sameWords(string); // entrega com padrao aplicado em palavras com mesmo significado utilizadas\n}\n\nfunction splitCustom(string) {\n  //split sem posicoes vazias\n  let result = [];\n  string.split(\" \").forEach(element => {\n    if (element.length > 0) {\n      result.push(element);\n    }\n  });\n  return result;\n}\n\nfunction rememberQuestions(json) {\n  //retorna perguntas memorizadas\n  let result = [];\n  let keys = Object.keys(json);\n  keys.forEach(function (key) {\n    result.push(json[key]);\n  });\n  return result;\n}\n\nfunction buildStringWithCounter(str, numbers) {\n  //monta string com counter\n  if (numbers >= 0 || numbers <= 99) {\n    numbers = \"00\" + numbers;\n  } else if (numbers > 9 || numbers <= 99) {\n    numbers = \"0\" + numbers;\n  } else if (numbers > 99 || numbers <= 999) {\n    numbers = toString(numbers);\n  } else {\n    numbers = \"ERR\";\n  }\n\n  let result = str + numbers;\n  return result;\n}\n\nfunction searchByCounter(str) {\n  //procura se string prossui contador true false\n  let prefix = \"%%\";\n  let newString = str.substring(str.length - 5, str.length - 3);\n  let result = false;\n\n  if (newString === prefix) {\n    result = true;\n  }\n\n  return result;\n}\n\nfunction removeCounter(str) {\n  //remove contador da string para comparações - add validacao\n  return str.substring(0, str.length - 5);\n}\n\nfunction getCounter(str) {\n  //retorna contador inserido em string o\n  let result;\n\n  if (str.substring(str.length - 5, str.length - 3) === \"%%\") {\n    result = parseInt(str.substring(str.length - 3, str.length));\n  } else {\n    result = 1;\n  }\n\n  return;\n}\n\nfunction thinkingAboutKeys(recognizedKeys) {\n  // filtra chaves reconhecidas pelo maior contador informado pela AnalyzeKeys (independente de quantas keys forem)\n  let memoryCache = [];\n\n  for (let i = 0; i < recognizedKeys.length; i++) {\n    //filtra os contadores\n    if (i !== 0) {\n      if (getCounter(recognizedKeys[i]) >= getCounter(memoryCache[0])) {\n        memoryCache.unshift(recognizedKeys[i]);\n      } else {\n        memoryCache.push(recognizedKeys[i]);\n      }\n    } else {\n      memoryCache = [];\n      memoryCache.unshift(recognizedKeys[i]);\n    }\n  } //para proximas ideias no reconhecimento\n  //console.log(memoryCache)\n\n\n  let moreLikely = [memoryCache[0]]; // filtra cache com o maior(ou maiores iguais) contador(res)  -- add validacao\n\n  for (let i = 1; i < memoryCache.length; i++) {\n    if (getCounter(memoryCache[i]) === getCounter(moreLikely[0])) {\n      moreLikely.push(removeCounter(memoryCache[i]));\n    }\n  }\n\n  moreLikely[0] = removeCounter(moreLikely[0]);\n  return [moreLikely, memoryCache];\n}\n\nfunction analyzeQuestion(hmmIRemember, userInput) {\n  //dividido em parcial e final/ compara as palavras do input com as questoes memorizadas\n  let partialAnalysis = []; //analise parcial\n\n  hmmIRemember.forEach(itemRemembered => {\n    rememberQuestions(memorizedQuestions).forEach(obj => {\n      //carrega cada objetos do json\n      if (obj.id === itemRemembered) {\n        //compara cada palavra do input com da pergunta gravada na memoria\n        let memorizedQuestion = obj.questions;\n        let resultList = [];\n\n        for (let i = 0; i < memorizedQuestion.length; i++) {\n          //divide frases em palavras\n          let splitedMemQuestion = memorizedQuestion[i].split(\" \");\n          let splitedInputUser = chewInput(userInput).split(\" \");\n          console.log(splitedInputUser);\n          let counterEqualWords = 0;\n\n          for (let ii = 0; ii < splitedMemQuestion.length; ii++) {\n            //compara as palavras\n            const wordInMem = splitedMemQuestion[ii];\n\n            for (let iii = 0; iii < splitedInputUser.length; iii++) {\n              const wordInInput = splitedInputUser[iii];\n\n              if (wordInInput === wordInMem) {\n                counterEqualWords++; // contadoooor\n              }\n            }\n          }\n\n          resultList.push([counterEqualWords, splitedMemQuestion.length]);\n        }\n\n        let result = resultList[0]; //add validacao\n\n        console.log(result);\n\n        for (let ii = 0; ii < resultList.length; ii++) {\n          //filtra o maior contador\n          if (resultList[ii] > result) {\n            result = resultList[ii];\n          }\n        }\n\n        partialAnalysis.push([obj.id, result]);\n      }\n    });\n  });\n  let finalAnalisys; // analise final\n\n  if (partialAnalysis.length > 1) {\n    //confere se apos analisar a questao, ainda existe um empate\n    finalAnalisys = [];\n    finalAnalisys.push(\"%%dontknow%%\");\n\n    for (let i = 0; i < partialAnalysis.length; i++) {\n      if (i === 0) {\n        finalAnalisys.push(partialAnalysis[i][0]);\n      } else if (i > 0 || partialAnalysis[i][1] === finalAnalisys[i - 1][0]) {\n        finalAnalisys.push(partialAnalysis[i][0]);\n      }\n    }\n  } else {\n    finalAnalisys = partialAnalysis[0][0];\n  }\n\n  return finalAnalisys;\n}\n\nfunction analyzeKeys(recognizingSomething) {\n  //analisa lista de keys reconhecidas\n  let thingsList = [];\n  let alreadyRecognized = false;\n\n  for (let i = 0; i < recognizingSomething.length; i++) {\n    //separa os itens reconhecidos\n    const itemRecognized = recognizingSomething[i];\n\n    for (let ii = 0; ii < thingsList.length; ii++) {\n      //separa os itens memorizados\n      const itemMemorized = thingsList[ii];\n\n      if (itemMemorized === itemRecognized) {\n        //compara\n        alreadyRecognized = true;\n      } else {\n        if (searchByCounter(itemMemorized)) {\n          if (removeCounter(itemMemorized) === itemRecognized) {\n            alreadyRecognized = true;\n          }\n        }\n      }\n    }\n\n    let prefixCounter = \"%%\";\n    let counter = 0;\n\n    if (alreadyRecognized) {\n      for (let ii = 0; ii < thingsList.length; ii++) {\n        let thing = thingsList[ii];\n\n        if (removeCounter(thing) === itemRecognized) {\n          counter++;\n          let numbers = parseInt(thing.substring(thing.length - 3, thing.length)) + 1;\n          thingsList[ii] = buildStringWithCounter(thingsList[ii].substring(0, thing.length - 3), numbers);\n        } else if (thing === itemRecognized) {\n          thingsList[ii] = buildStringWithCounter(thingsList[ii] + prefixCounter, counter);\n        }\n      }\n    } else {\n      counter++;\n      thingsList.push(buildStringWithCounter(itemRecognized + prefixCounter, counter));\n    }\n  }\n\n  return thingsList;\n}\n\nfunction getAnswersById(id) {\n  // retorna respostas do json pelo id da pergunta\n  let result;\n\n  if (Array.isArray(id)) {\n    // se nao souber responder - novo\n    result = [];\n\n    for (let i = 0; i < id.length; i++) {\n      const eachId = id[i];\n\n      for (let ii = 0; ii < memorizedQuestions.length; ii++) {\n        const memorizedId = memorizedQuestions[ii].id;\n\n        if (result[0] === undefined) {\n          result.push(\"Eu não entendi muito bem a sua pergunta\");\n          result.push(\"Você quis dizer alguns dos temas abaixo?\");\n        }\n\n        if (memorizedId === eachId) {\n          result.push(memorizedQuestions[ii].desc);\n        }\n      }\n    }\n  } else {\n    if (id === \"%%dontknow%%\") {\n      // se nao souber responder - antigo\n      result = [id];\n    } else {\n      //se souber\n      for (let i = 0; i < memorizedQuestions.length; i++) {\n        const memorizedId = memorizedQuestions[i].id;\n\n        if (memorizedId === id) {\n          result = memorizedQuestions[i].answers;\n        }\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction compareWords(userInput, memorizedWord, memorizedQuestion) {\n  //compara palavras\n  let result = false;\n\n  if (userInput === memorizedWord) {\n    result = true;\n  }\n\n  return result;\n}\n\nconst questions = {\n  compare: userInput => {\n    let recognizingSomething = []; //mastiga a pergunta para entender mais facil && desmembra a pergunta para procurar pelos gatilhos de comparação(keys)\n\n    splitCustom(chewInput(userInput).toLowerCase()).forEach(wordInUserInput => {\n      rememberQuestions(memorizedQuestions).forEach(memorizedQuestion => {\n        let keys = memorizedQuestion.keys;\n        let passed = false; //bool condition\n\n        let twoFaseValidation = false;\n\n        if (typeof keys === \"object\") {\n          //compara palavras vindas do usuarios com as keys\n          for (let i = 0; i < keys.length; i++) {\n            if (passed) {\n              twoFaseValidation = true;\n            }\n\n            if (typeof keys[i] === \"object\") {\n              let checkKeys = keys[i];\n\n              for (let ii = 0; ii < checkKeys.length; ii++) {\n                passed = compareWords(wordInUserInput, checkKeys[ii], memorizedQuestion);\n              }\n            } else {\n              passed = compareWords(wordInUserInput, keys[i], memorizedQuestion);\n            }\n          }\n        } else {\n          passed = compareWords(wordInUserInput, keys, memorizedQuestion); // revisar - entrada para comandos internos (futuro)\n        }\n\n        if (twoFaseValidation) {\n          recognizingSomething.push(memorizedQuestion.id);\n        }\n      });\n    });\n    const myBrainIsArching = thinkingAboutKeys(analyzeKeys(recognizingSomething)); //analisa as keys identificadas e processa qual delas foi a mais acessada \n    //const keyCompareCache = myBrainIsArching[1]//para futuras atualizacoes\n\n    const hmmIRemember = myBrainIsArching[0]; //envia a resposta ja validada pelo analyze question\n    //console.log(getAnswersById(analyzeQuestion(hmmIRemember, userInput)))\n\n    return getAnswersById(analyzeQuestion(hmmIRemember, userInput));\n  }\n};\nexport default questions;","map":{"version":3,"sources":["C:/desenv/react-profile/profile/src/components/Chatbot/questions.js"],"names":["memorizedQuestions","preventStutter","word","sameWords","userInput","sameWords_in","sameWords_out","i","length","replace","chewInput","string","mapaAcentosHex","a","e","o","u","c","n","letra","expressaoRegular","split","splice","splitCustom","result","forEach","element","push","rememberQuestions","json","keys","Object","key","buildStringWithCounter","str","numbers","toString","searchByCounter","prefix","newString","substring","removeCounter","getCounter","parseInt","thinkingAboutKeys","recognizedKeys","memoryCache","unshift","moreLikely","analyzeQuestion","hmmIRemember","partialAnalysis","itemRemembered","obj","id","memorizedQuestion","questions","resultList","splitedMemQuestion","splitedInputUser","console","log","counterEqualWords","ii","wordInMem","iii","wordInInput","finalAnalisys","analyzeKeys","recognizingSomething","thingsList","alreadyRecognized","itemRecognized","itemMemorized","prefixCounter","counter","thing","getAnswersById","Array","isArray","eachId","memorizedId","undefined","desc","answers","compareWords","memorizedWord","compare","toLowerCase","wordInUserInput","passed","twoFaseValidation","checkKeys","myBrainIsArching"],"mappings":"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","sourcesContent":["import memorizedQuestions from \"./memorizedQuestions.json\";\r\n\r\n\r\n\r\nfunction preventStutter(word) { //pra evitar que os proximos resultados nao saim embaralhados\r\n    return \" \" + word + \" \"\r\n}\r\n\r\nfunction sameWords(userInput) { //jsonificar isso aquiiiii\r\n    // girias ou variacoes \r\n    let sameWords_in = [\r\n        \"vc\",\r\n        \"tu\",\r\n        \"q\",\r\n        \"o q\",\r\n        \"oq\",\r\n        \"5\",\r\n        \"estacao\",\r\n        \"de trem\",\r\n        \"de metro\",\r\n        \"fracos\",\r\n        \"fortes\",\r\n        \"por que\",\r\n        \"pq\",\r\n        \"programacao\",\r\n        \"situacao\",\r\n        \"fala\",\r\n        \"conta\",\r\n        \"realizacoes\",\r\n        \"realizacao\",\r\n        \"conquistas\",\r\n        \"localizacao\"\r\n\r\n    ]\r\n    let sameWords_out = [\r\n        \"voce\",\r\n        \"voce\",\r\n        \"que\",\r\n        \"o que\",\r\n        \"o que\",\r\n        \"cinco\",\r\n        \"estaçao\",\r\n        \"\",\r\n        \"\",\r\n        \"fraco\",\r\n        \"forte\",\r\n        \"porque\",\r\n        \"porque\",\r\n        \"programaçao\",\r\n        \"situaçao\",\r\n        \"fale\",\r\n        \"conte\",\r\n        \"realizaçoes\",\r\n        \"realizaçao\",\r\n        \"conquista\",\r\n        \"localizaçao\"\r\n\r\n\r\n    ]\r\n    for (let i = 0; i < sameWords_in.length; i++) {\r\n        userInput = preventStutter(userInput).replace(preventStutter(sameWords_in[i]), preventStutter(sameWords_out[i]))\r\n    } //converte palavras com significados iguais aos memorizados\r\n\r\n    return userInput //entrega com as palavras com significados iguais convertidas para palavra padrao\r\n}\r\n\r\nfunction chewInput(string) { //mastiga input deixando mais facil de entender\r\n    let mapaAcentosHex = {\r\n        a: /[\\xE0-\\xE6]/g,\r\n        e: /[\\xE8-\\xEB]/g,\r\n        i: /[\\xEC-\\xEF]/g,\r\n        o: /[\\xF2-\\xF6]/g,\r\n        u: /[\\xF9-\\xFC]/g,\r\n        c: /\\xE7/g,\r\n        n: /\\xF1/g\r\n    };\r\n    for (let letra in mapaAcentosHex) { //retira acentos\r\n        let expressaoRegular = mapaAcentosHex[letra]\r\n        string = string.replace(expressaoRegular, letra)\r\n    }\r\n    let split = string.split(\" \")\r\n    for(let i=0;i<split.length;i++){\r\n        if (split[i]===\"\"){\r\n            split.splice()\r\n        }\r\n    }\r\n    return sameWords(string) // entrega com padrao aplicado em palavras com mesmo significado utilizadas\r\n}\r\n\r\nfunction splitCustom(string) { //split sem posicoes vazias\r\n    let result = []\r\n    string.split(\" \").forEach(element => {\r\n        if (element.length > 0) {\r\n            result.push(element)\r\n        }\r\n    })\r\n\r\n    return result\r\n}\r\n\r\nfunction rememberQuestions(json) { //retorna perguntas memorizadas\r\n    let result = [];\r\n    let keys = Object.keys(json);\r\n    keys.forEach(function (key) {\r\n        result.push(json[key]);\r\n    });\r\n\r\n    return result\r\n}\r\n\r\nfunction buildStringWithCounter(str, numbers) { //monta string com counter\r\n    if ((numbers >= 0) || (numbers <= 99)) {\r\n        numbers = \"00\" + numbers\r\n    } else if ((numbers > 9) || (numbers <= 99)) {\r\n        numbers = \"0\" + numbers\r\n    } else if ((numbers > 99) || (numbers <= 999)) {\r\n        numbers = toString(numbers)\r\n    } else {\r\n        numbers = \"ERR\"\r\n    }\r\n    let result = str + numbers\r\n    return result\r\n}\r\n\r\nfunction searchByCounter(str) { //procura se string prossui contador true false\r\n    let prefix = \"%%\"\r\n    let newString = str.substring(str.length - 5, str.length - 3)\r\n    let result = false\r\n    if (newString === prefix) {\r\n        result = true\r\n    }\r\n    return result\r\n}\r\n\r\nfunction removeCounter(str) { //remove contador da string para comparações - add validacao\r\n    return str.substring(0, str.length - 5)\r\n}\r\n\r\nfunction getCounter(str) { //retorna contador inserido em string o\r\n    let result\r\n\r\n    if(str.substring(str.length -5, str.length - 3)===\"%%\"){\r\n        result = parseInt(str.substring(str.length - 3, str.length))\r\n    } else {\r\n        result = 1\r\n    }\r\n    return \r\n}\r\n\r\nfunction thinkingAboutKeys(recognizedKeys) { // filtra chaves reconhecidas pelo maior contador informado pela AnalyzeKeys (independente de quantas keys forem)\r\n    let memoryCache = []\r\n    for (let i = 0; i < recognizedKeys.length; i++) { //filtra os contadores\r\n        if (i!==0) {\r\n            if (getCounter(recognizedKeys[i]) >= getCounter(memoryCache[0])) {\r\n                memoryCache.unshift(recognizedKeys[i])\r\n            } else {\r\n                memoryCache.push(recognizedKeys[i])\r\n            }\r\n        } else {\r\n            memoryCache = []\r\n            memoryCache.unshift(recognizedKeys[i])\r\n        }\r\n    } //para proximas ideias no reconhecimento\r\n    //console.log(memoryCache)\r\n\r\n    let moreLikely = [memoryCache[0]] // filtra cache com o maior(ou maiores iguais) contador(res)  -- add validacao\r\n    for (let i = 1; i < memoryCache.length; i++) {\r\n        if (getCounter(memoryCache[i]) === getCounter(moreLikely[0])) {\r\n            moreLikely.push(removeCounter(memoryCache[i]))\r\n        }\r\n    }\r\n    moreLikely[0] = removeCounter(moreLikely[0])\r\n\r\n    return [moreLikely, memoryCache]\r\n}\r\n\r\nfunction analyzeQuestion(hmmIRemember, userInput) { //dividido em parcial e final/ compara as palavras do input com as questoes memorizadas\r\n    let partialAnalysis = [] //analise parcial\r\n\r\n    hmmIRemember.forEach(itemRemembered => {\r\n\r\n        rememberQuestions(memorizedQuestions).forEach(obj => { //carrega cada objetos do json\r\n\r\n            if (obj.id === itemRemembered) { //compara cada palavra do input com da pergunta gravada na memoria\r\n                let memorizedQuestion = obj.questions\r\n                let resultList = []\r\n                for (let i = 0; i < memorizedQuestion.length; i++) { //divide frases em palavras\r\n                    let splitedMemQuestion = memorizedQuestion[i].split(\" \")\r\n                    let splitedInputUser = chewInput(userInput).split(\" \")\r\n                    console.log(splitedInputUser)\r\n                    let counterEqualWords = 0\r\n\r\n                    for (let ii = 0; ii < splitedMemQuestion.length; ii++) { //compara as palavras\r\n                        const wordInMem = splitedMemQuestion[ii]\r\n                        for (let iii = 0; iii < splitedInputUser.length; iii++) {\r\n                            const wordInInput = splitedInputUser[iii]\r\n                            if (wordInInput === wordInMem) {\r\n                                counterEqualWords++ // contadoooor\r\n                            }\r\n                        }\r\n                    }\r\n                    resultList.push([counterEqualWords,splitedMemQuestion.length])\r\n                }\r\n                let result = resultList[0] //add validacao\r\n                \r\n                console.log(result)\r\n                for (let ii = 0; ii < resultList.length; ii++) { //filtra o maior contador\r\n                    \r\n                    if (resultList[ii] > result) {\r\n                        result = resultList[ii]\r\n                    }\r\n                }\r\n                partialAnalysis.push([obj.id, result])\r\n            }\r\n        })\r\n    })\r\n\r\n    let finalAnalisys // analise final\r\n    if (partialAnalysis.length > 1) { //confere se apos analisar a questao, ainda existe um empate\r\n        finalAnalisys = []\r\n        finalAnalisys.push(\"%%dontknow%%\")\r\n\r\n\r\n        for (let i = 0; i < partialAnalysis.length; i++) {\r\n            if (i === 0) {\r\n                finalAnalisys.push(partialAnalysis[i][0])\r\n            } else if ((i > 0) || (partialAnalysis[i][1] === finalAnalisys[i - 1][0])) {\r\n                finalAnalisys.push(partialAnalysis[i][0])\r\n            }\r\n        }\r\n\r\n    } else {\r\n        finalAnalisys = partialAnalysis[0][0]\r\n    }\r\n\r\n    return finalAnalisys\r\n}\r\n\r\nfunction analyzeKeys(recognizingSomething) { //analisa lista de keys reconhecidas\r\n    let thingsList = []\r\n    let alreadyRecognized = false\r\n\r\n    for (let i = 0; i < recognizingSomething.length; i++) {//separa os itens reconhecidos\r\n        const itemRecognized = recognizingSomething[i]\r\n\r\n        for (let ii = 0; ii < thingsList.length; ii++) { //separa os itens memorizados\r\n            const itemMemorized = thingsList[ii]\r\n\r\n            if (itemMemorized === itemRecognized) { //compara\r\n                alreadyRecognized = true\r\n            } else {\r\n\r\n                if (searchByCounter(itemMemorized)) {\r\n\r\n                    if (removeCounter(itemMemorized) === itemRecognized) {\r\n                        alreadyRecognized = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let prefixCounter = \"%%\"\r\n        let counter = 0\r\n        if (alreadyRecognized) {\r\n            for (let ii = 0; ii < thingsList.length; ii++) {\r\n                let thing = thingsList[ii]\r\n\r\n                if (removeCounter(thing) === itemRecognized) {\r\n                    counter++\r\n                    let numbers = parseInt(thing.substring(thing.length - 3, thing.length)) + 1\r\n                    thingsList[ii] = buildStringWithCounter(thingsList[ii].substring(0, thing.length - 3), numbers)\r\n\r\n                } else if (thing === itemRecognized) {\r\n                    thingsList[ii] = buildStringWithCounter(thingsList[ii] + prefixCounter, counter)\r\n\r\n                }\r\n            }\r\n        } else {\r\n            counter++\r\n            thingsList.push(buildStringWithCounter(itemRecognized + prefixCounter, counter))\r\n        }\r\n    }\r\n\r\n    return thingsList\r\n}\r\n\r\nfunction getAnswersById(id) { // retorna respostas do json pelo id da pergunta\r\n    let result\r\n\r\n    if (Array.isArray(id)) { // se nao souber responder - novo\r\n        result = []\r\n        for (let i = 0; i < id.length; i++) {\r\n            const eachId = id[i]\r\n\r\n            for (let ii = 0; ii < memorizedQuestions.length; ii++) {\r\n                const memorizedId = memorizedQuestions[ii].id\r\n\r\n                if (result[0] === undefined) {\r\n                    result.push(\"Eu não entendi muito bem a sua pergunta\")\r\n                    result.push(\"Você quis dizer alguns dos temas abaixo?\")\r\n                }\r\n                if (memorizedId === eachId) {\r\n                    result.push(memorizedQuestions[ii].desc)\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n    } else {\r\n        if (id === \"%%dontknow%%\") { // se nao souber responder - antigo\r\n            result = [id]\r\n\r\n        } else { //se souber\r\n            for (let i = 0; i < memorizedQuestions.length; i++) {\r\n                const memorizedId = memorizedQuestions[i].id\r\n                if (memorizedId === id) {\r\n                    result = memorizedQuestions[i].answers\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return result\r\n}\r\n\r\nfunction compareWords(userInput, memorizedWord, memorizedQuestion) { //compara palavras\r\n    let result = false\r\n    if (userInput === memorizedWord) {\r\n        result = true\r\n    }\r\n    return result\r\n}\r\n\r\nconst questions = {\r\n    compare: (userInput) => {\r\n        let recognizingSomething = []\r\n\r\n\r\n\r\n        //mastiga a pergunta para entender mais facil && desmembra a pergunta para procurar pelos gatilhos de comparação(keys)\r\n        splitCustom(chewInput(userInput).toLowerCase()).forEach(wordInUserInput => {\r\n            rememberQuestions(memorizedQuestions).forEach(memorizedQuestion => {\r\n                let keys = memorizedQuestion.keys\r\n                let passed = false //bool condition\r\n                let twoFaseValidation = false\r\n                if (typeof (keys) === \"object\") { //compara palavras vindas do usuarios com as keys\r\n\r\n                    for (let i = 0; i < keys.length; i++) {\r\n                        if (passed) {\r\n                            twoFaseValidation = true\r\n                        }\r\n                        if (typeof (keys[i]) === \"object\") {\r\n                            let checkKeys = keys[i]\r\n                            for (let ii = 0; ii < checkKeys.length; ii++) {\r\n                                passed = compareWords(wordInUserInput, checkKeys[ii], memorizedQuestion)\r\n                            }\r\n                        } else {\r\n                            passed = compareWords(wordInUserInput, keys[i], memorizedQuestion)\r\n                        }\r\n                    }\r\n                } else {\r\n                    passed = compareWords(wordInUserInput, keys, memorizedQuestion)\r\n                    // revisar - entrada para comandos internos (futuro)\r\n                }\r\n\r\n                if (twoFaseValidation) {\r\n                    recognizingSomething.push(memorizedQuestion.id)\r\n                }\r\n            })\r\n        })\r\n        const myBrainIsArching = thinkingAboutKeys(analyzeKeys(recognizingSomething))//analisa as keys identificadas e processa qual delas foi a mais acessada \r\n        //const keyCompareCache = myBrainIsArching[1]//para futuras atualizacoes\r\n        const hmmIRemember = myBrainIsArching[0]\r\n\r\n        //envia a resposta ja validada pelo analyze question\r\n        //console.log(getAnswersById(analyzeQuestion(hmmIRemember, userInput)))\r\n        return getAnswersById(analyzeQuestion(hmmIRemember, userInput))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default questions;"]},"metadata":{},"sourceType":"module"}