{"ast":null,"code":"// ActionProvider starter code\nimport config from './config';\nimport messages from './messages';\nimport memorizedQuestions from './memorizedQuestions.json';\nlet message;\n\nclass ActionProvider {\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\n    this.sendAnswer = answersList => {\n      const message = [];\n      let receivedCode_all = false;\n\n      if (answersList[0] === \"%%all%%\") {\n        //temporario so para  reto o 'que o bot consegue responder'\n        answersList = [];\n\n        for (let i = 0; i < memorizedQuestions.length; i++) {\n          const questionDesc = memorizedQuestions[i].desc;\n          if (question) answersList.push(questionDesc);\n        }\n\n        receivedCode_all = true;\n      }\n\n      for (let i = 0; i < answersList.length; i++) {\n        //separa as respostas\n        const answer = answersList[i];\n        let delayValue = 1000; // seta tempo iniciao do delay\n\n        if (!receivedCode_all) {\n          // seta fixo para retornar oq sabe responder\n          if (i > 0) {\n            delayValue = delayValue + i * 3500; //tempo acumulado do delay\n          }\n        }\n\n        message.push(this.createChatBotMessage(answer, {\n          delay: delayValue\n        })); //monta o message \n      }\n\n      message.forEach(e => {\n        //envia o message\n        this.addMessageToState(e);\n      });\n    };\n\n    this.default = () => {\n      message = [this.createChatBotMessage(messages.all_1(), {\n        delay: 1000\n      })];\n      message.forEach(e => {\n        this.addMessageToState(e);\n      });\n    };\n\n    this.presentation = (resultIsa, name) => {\n      if (resultIsa) {\n        message = [this.createChatBotMessage(messages.askName_finish(name)), this.createChatBotMessage(messages.presentation_finish(name), {\n          delay: 500\n        })];\n        message.forEach(e => {\n          this.addMessageToState(e);\n        });\n      } else {\n        message = [this.createChatBotMessage(messages.askName_finish(\"$$IsaFalse%%\")), this.createChatBotMessage(messages.presentation_finish(\"$$IsaFalse%%\"), {\n          delay: 500\n        })];\n        message.forEach(e => {\n          this.addMessageToState(e);\n        });\n      }\n\n      config.step = \"form_init\";\n    };\n\n    this.dont_know = () => {\n      message = [this.createChatBotMessage(messages.dont_know(), {\n        delay: 1000\n      })];\n      message.forEach(e => {\n        this.addMessageToState(e);\n      });\n    };\n\n    this.addMessageToState = message => {\n      this.setState(prevState => ({ ...prevState,\n        messages: [...prevState.messages, message]\n      }));\n    };\n\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n    this.createClientMessage = createClientMessage;\n  }\n\n}\n\nexport default ActionProvider;","map":{"version":3,"sources":["C:/desenv/react-profile/profile/src/components/Chatbot/ActionProvider.js"],"names":["config","messages","memorizedQuestions","message","ActionProvider","constructor","createChatBotMessage","setStateFunc","createClientMessage","sendAnswer","answersList","receivedCode_all","i","length","questionDesc","desc","question","push","answer","delayValue","delay","forEach","e","addMessageToState","default","all_1","presentation","resultIsa","name","askName_finish","presentation_finish","step","dont_know","setState","prevState"],"mappings":"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","sourcesContent":["// ActionProvider starter code\r\nimport config from './config';\r\nimport messages from './messages';\r\nimport memorizedQuestions from './memorizedQuestions.json';\r\n\r\n\r\nlet message;\r\n\r\n\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc, createClientMessage) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n    this.createClientMessage = createClientMessage;\r\n  }\r\n\r\n  sendAnswer = (answersList) => {\r\n    const message = []\r\n    let receivedCode_all = false\r\n\r\n    if (answersList[0] === \"%%all%%\") {//temporario so para  reto o 'que o bot consegue responder'\r\n      answersList = []\r\n      for (let i = 0; i < memorizedQuestions.length; i++) {\r\n        const questionDesc = memorizedQuestions[i].desc\r\n        if(question)\r\n        answersList.push(questionDesc)\r\n      }\r\n      receivedCode_all = true\r\n    }\r\n    for (let i = 0; i < answersList.length; i++) { //separa as respostas\r\n      const answer = answersList[i]\r\n      let delayValue = 1000 // seta tempo iniciao do delay\r\n\r\n      if (!receivedCode_all) { // seta fixo para retornar oq sabe responder\r\n        if (i > 0) {\r\n          delayValue = delayValue + (i * 3500) //tempo acumulado do delay\r\n        }\r\n      }\r\n      message.push(this.createChatBotMessage(answer, { delay: delayValue })) //monta o message \r\n    }\r\n    message.forEach(e => { //envia o message\r\n      this.addMessageToState(e);\r\n    })\r\n  }\r\n\r\n  default = () => {\r\n    message = [\r\n      this.createChatBotMessage(messages.all_1(), { delay: 1000 })\r\n    ];\r\n    message.forEach(e => {\r\n      this.addMessageToState(e);\r\n    })\r\n  }\r\n\r\n  presentation = (resultIsa, name) => {\r\n    if (resultIsa) {\r\n      message = [\r\n        this.createChatBotMessage(messages.askName_finish(name)),\r\n        this.createChatBotMessage(messages.presentation_finish(name), { delay: 500 })\r\n      ];\r\n      message.forEach(e => {\r\n        this.addMessageToState(e);\r\n      });\r\n    } else {\r\n      message = [\r\n        this.createChatBotMessage(messages.askName_finish(\"$$IsaFalse%%\")),\r\n        this.createChatBotMessage(messages.presentation_finish(\"$$IsaFalse%%\"), { delay: 500 })\r\n      ];\r\n      message.forEach(e => {\r\n        this.addMessageToState(e);\r\n      });\r\n    }\r\n    config.step = \"form_init\"\r\n  }\r\n\r\n  dont_know = () => {\r\n    message = [\r\n      this.createChatBotMessage(messages.dont_know(), { delay: 1000 })\r\n    ];\r\n    message.forEach(e => {\r\n      this.addMessageToState(e);\r\n    })\r\n  }\r\n\r\n\r\n  addMessageToState = (message) => {\r\n    this.setState(prevState => ({\r\n      ...prevState,\r\n      messages: [...prevState.messages, message],\r\n    }));\r\n\r\n  };\r\n\r\n\r\n}\r\n\r\nexport default ActionProvider;"]},"metadata":{},"sourceType":"module"}